//Функция Обработать_getUpdatesНаСервере(кешНастройки, token) Экспорт 
Процедура Обработать_getUpdatesНаСервере(token, RequestBodyJSON, Bot_AnswerJSON, RespondBodyJSON) Экспорт 
	
	//TODO 1)уровень ошибок 2)обработка нескольких полученных сообщений
	// /bot1706451540:AAHJyGS-NqtqT_LHPPgguoTyEQqVxJnpT0c/
//	ИнвайтЛинк = "https://t.me/+C0h6unT_0q04Y2Uy";Тарасик 1695985713 | SCM bot -756483197     |Тест удалить     -695594876
	RequestBodyJSON = "";
	Ошибки = Новый Массив;
	СтруктураОтвета = scmHTTPCервисыСервер.ПолучитьСообщенияТелеграммЧат(token.АдресРесурса, РегистрыСведений.scmОчередьЗапросовЧатБота.ПоследнееСообщение(token).update_id, Ошибки, RespondBodyJSON);	
	Если СтруктураОтвета.Свойство("result") Тогда //Ошибки.Количество() = 0
		ОпределениеМетода_sendMessage = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов("/TelegramBot/", "sendMessage");	
		sendMessage_parameters = ОпределениеМетода_sendMessage["parameters"];		
		Для Каждого чат Из СтруктураОтвета.result Цикл 
			Если чат.Свойство("message") Тогда 
				Bot_AnswerJSON = ОбработатьВходящееСообщениеНаСервере(чат, token, sendMessage_parameters, RequestBodyJSON, RespondBodyJSON);
			Иначе 	
				Bot_AnswerJSON = 0;
			КонецЕсли;
			////Если Ошибки.количество() = 0 Тогда 
			//	РегистрыСведений.scmОчередьЗапросовЧатБота.ДобавитьСообщениеВОчередь(token, context);
			////КонецЕсли;
		КонецЦикла;			
		RequestBodyJSON = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(СтруктураОтвета);
	Иначе 
		Для н=0 По Ошибки.Количество()-1 Цикл 
			Если ТипЗнч(Ошибки[н]) = Тип("Структура") Тогда 
				Ошибки[н] = scmHTTPCервисыOpenAPI.ПредставлениеСтруктуры(Ошибки[н]);
			КонецЕсли;	
		КонецЦикла;	
		//RespondBodyJSON = RespondBodyJSON + Символы.ПС + СтрСоединить(Ошибки, ";");
	КонецЕсли;	
	
КонецПроцедуры

Функция ОбработатьВходящееСообщениеНаСервере(чат, token, sendMessage_parameters, RequestBodyJSON, RespondBodyJSON) Экспорт
	
	context = Новый Структура("token, chat_id, message_id, update_id, first_last_name, chat_text, bot_answer, user, state, reply_to_message, error, photo", token, 0, 0,0,,,,Справочники.Пользователи.ПустаяСсылка(), scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().Неопределено, "", "");
    СтруктураОтвет = ОбработатьЗапросЧатаСформироватьОтвет(token, чат, sendMessage_parameters, context);
	Bot_AnswerJSON = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(СтруктураОтвет);
	//Если Не ПустаяСтрока(context.photo) Тогда \\удалить безусловную загрузку
	//	Ошибки = scmHTTPCервисыСервер.ТелеграммЧатЗагрузитьФайл(кешНастройки.АдресРесурса, context.photo, СтруктураОтвет);
	//	RespondBodyJSON = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(Ошибки);
	//КонецЕсли;
	//Если Не ПустаяСтрока(context.bot_answer) Тогда   
	Ошибки = scmHTTPCервисыСервер.ТелеграммЧатОтправитьТекст(token.АдресРесурса, context.chat_id, context.message_id, СтруктураОтвет);
	RespondBodyJSON = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(Ошибки);
	//КонецЕсли;
//	Если Ошибки.количество() = 0 Тогда 
	context.error =  СтрСоединить(Ошибки, ";");
	РегистрыСведений.scmОчередьЗапросовЧатБота.ДобавитьСообщениеВОчередь(token, context);
//	КонецЕсли;
	Возврат Bot_AnswerJSON;
	
КонецФункции

Функция ОбработатьЗапросЧатаСформироватьОтвет(token, чат, parameters, context)
	
	Если чат.Свойство("message") И чат.message.Свойство("text") Тогда 							                       
		context.chat_id = Формат(чат.message.chat.id, "ЧГ=");
		context.update_id = Число(чат.update_id) + 1;
		context.reply_to_message = ?(чат.message.Свойство("reply_to_message"), чат.message.reply_to_message, "");
		context.first_last_name = чат.message.from.first_name + " " + чат.message.from.last_name;
		context.chat_text = чат.message.text;
		context.bot_answer = "";	
	КонецЕсли;
	Если чат.Свойство("message") И чат.message.Свойство("photo") Тогда 						
		context.chat_id = Формат(чат.message.chat.id, "ЧГ=");
		context.update_id = Число(чат.update_id) + 1;
		context.reply_to_message = ?(чат.message.Свойство("reply_to_message"), чат.message.reply_to_message, "");
		context.photo = чат.message.photo[чат.message.photo.Количество()-1];
		context.first_last_name = чат.message.from.first_name + " " + чат.message.from.last_name;
		context.chat_text = "photo";
		context.bot_answer = "";
	КонецЕсли;
	Если чат.Свойство("callback_query") И чат.callback_query.Свойство("data") Тогда 						
		context.chat_id = Формат(чат.callback_query.message.chat.id, "ЧГ=");
		context.message_id = Формат(чат.callback_query.message.message_id, "ЧГ=");
		context.update_id = Число(чат.update_id);
		context.reply_to_message = чат.callback_query.chat_instance;
		context.first_last_name = чат.callback_query.from.first_name + " " + чат.callback_query.from.last_name;
		
		context.chat_text = чат.callback_query.data;
		context.bot_answer = "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(context.chat_text) Тогда  
		
		СтруктураОтвет 	= scmHTTPCервисыOpenAPI.СобратьСтруктуруОтвета(Новый Структура, parameters);	
		Ошибки 			= Новый Массив;
		МассивДействий 	= Новый Массив;
		//+++StateMachine
		ПоследнееСообщение = РегистрыСведений.scmОчередьЗапросовЧатБота.ПоследнееСообщение(token, context.chat_id, context.first_last_name);
		ТаблицаПереходов = ТаблицаПереходов_ТелеграмБот();
		chat_text = СокрЛП(СтрРазделить(context.chat_text, ">")[0]);
	//	chat_text = НРег(chat_text);
		
		Если СокрЛП(chat_text) = "/menu" Тогда	
			context.state = scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().СтартовоеМеню;  //старт слово. безусловный переход
			context.bot_answer = "start";  
			МассивДействий = ПереходВ_СтартовоеМеню(context);
		ИначеЕсли СокрЛП(chat_text) = "/stop" Тогда	
			context.state = scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().Стоп;  //стоп слово. безусловный переход
			context.bot_answer = "stop";  
		//ИначеЕсли НРег(СокрЛП(chat_text)) = "photo" Тогда	
		//	context.state = scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().Стоп;  //покачто безусловный переход TODO указывать какому документу
		//	context.bot_answer = "Файл загружается";                                    
		ИначеЕсли СокрЛП(chat_text) = "/stat" Тогда	
			context.state = scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().Стоп;  //статистика. безусловный переход
			context.bot_answer = "Статистика за день";			
			context.bot_answer = context.bot_answer + Символы.ПС + "Пользователь/Сообщений ";	
			Запрос = Новый Запрос;
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(1) КАК Количество,
				|	scmОчередьЗапросовЧатБота.first_last_name КАК first_last_name,
				|	scmОчередьЗапросовЧатБота.update_id КАК update_id
				|ИЗ
				|	РегистрСведений.scmОчередьЗапросовЧатБота КАК scmОчередьЗапросовЧатБота
				|ГДЕ
				|	scmОчередьЗапросовЧатБота.Период >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
				|	И scmОчередьЗапросовЧатБота.Период <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
				|
				|СГРУППИРОВАТЬ ПО
				|	scmОчередьЗапросовЧатБота.first_last_name,
				|	scmОчередьЗапросовЧатБота.update_id
				|ИТОГИ
				|	СУММА(Количество)
				|ПО
				|	first_last_name";			
			Запрос.УстановитьПараметр("Период", ТекущаяДата());			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка0 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
			Пока Выборка0.Следующий() Цикл
				Выборка1 = Выборка0.Выбрать();			
				context.bot_answer = context.bot_answer + Символы.ПС + Выборка0.first_last_name + "/" + Выборка1.Количество();			
			КонецЦикла;
		Иначе 	
		//	м = ТаблицаПереходов.НайтиСтроки(Новый Структура("ТекущееСостояние, СледующееСостояние", ПоследнееСообщение.state, chat_text));
			м = ТаблицаПереходов.НайтиСтроки(Новый Структура("ТекущееСостояние, Ответ", ПоследнееСообщение.state, chat_text));
			Если м.Количество() = 0 Тогда
				//context.bot_answer = "Переход не определен";                                    
				Если СокрЛП(chat_text) = "повтор последнего действия" Тогда 
					ПоследнееСообщение = РегистрыСведений.scmОчередьЗапросовЧатБота.ПоследнееСообщение(token, context.chat_id, context.first_last_name, -1);
					chat_text = СокрЛП(СтрРазделить(ПоследнееСообщение.chat_text, ">")[0]);
					chat_text = НРег(chat_text);
					м = ТаблицаПереходов.НайтиСтроки(Новый Структура("СледующееСостояние, Ответ", ПоследнееСообщение.state, chat_text));
					Попытка
						Выполнить("МассивДействий = " + м[0].Действие);
						context.state = м[0].СледующееСостояние;
					Исключение
						context.error = ОписаниеОшибки();
						Константы.scmИспользоватьТелеграмБоты.Установить(Ложь);
					КонецПопытки;
				Иначе 	
					МассивДействий = ПереходВ_ПовторЗапроса(context);
				КонецЕсли;	
			//	Возврат СтруктураОтвет;
			Сообщить(""+ ПоследнееСообщение.state + ""+ chat_text);
			ИначеЕсли м.Количество() = 1 Тогда
				Попытка
				//	Выполнить("МассивДействий = scmHTTPCервисыСервер." + м[0].Действие);
					Выполнить("МассивДействий = " + м[0].Действие);
					context.state = м[0].СледующееСостояние;
				Исключение
					context.error = ОписаниеОшибки();
					Константы.scmИспользоватьТелеграмБоты.Установить(Ложь);
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;
		//---StateMachine
		
		Если МассивДействий.Количество() > 0 Тогда 
			//+++сборка reply_markup
			reply_markup = scmHTTPCервисыOpenAPI.СобратьСтруктуруОтвета(Новый Структура, parameters["reply_markup"].value);				
			Для Каждого м Из МассивДействий Цикл 
				Если ТипЗнч(м) = Тип("Массив") Тогда //inline_keyboard
					keyboard = scmHTTPCервисыOpenAPI.СобратьСтруктуруОтвета(Новый Структура, parameters["reply_markup"].value["inline_keyboard"].value);
					Для Каждого м2 Из м Цикл 
						button = scmHTTPCервисыOpenAPI.СобратьСтруктуруОтвета(Новый Структура, parameters["reply_markup"].value["inline_keyboard"].value["button"].value);
						button.text = м2;	
						button.callback_data = Сред(м2, 0, 32);//1-64 bytes	
						keyboard.button.Добавить(button);
					КонецЦикла;
					reply_markup.inline_keyboard.Добавить(keyboard.button);
				Иначе //КнопкиВНовыхСтроках
					keyboard = scmHTTPCервисыOpenAPI.СобратьСтруктуруОтвета(Новый Структура, parameters["reply_markup"].value["inline_keyboard"].value);
					button = scmHTTPCервисыOpenAPI.СобратьСтруктуруОтвета(Новый Структура, parameters["reply_markup"].value["inline_keyboard"].value["button"].value);
					button.text = м;	
					button.callback_data = Сред(м, 0, 32);//1-64 bytes;	
					keyboard.button.Добавить(button);
					reply_markup.inline_keyboard.Добавить(keyboard.button);
				КонецЕсли;	
			КонецЦикла;
			//reply_markup.one_time_keyboard = Истина;
			//reply_markup.resize_keyboard = Истина;
			reply_markup.selective = Ложь;
			//---сборка reply_markup
		КонецЕсли;
	
		СтруктураОтвет.text = "bot>" + context.first_last_name + ": " +context.chat_text + ">" + context.bot_answer;			
		СтруктураОтвет.reply_markup = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(reply_markup); //сериализация параметра
						
	КонецЕсли;

	Возврат СтруктураОтвет;
	
КонецФункции

#Область StateMachine

Функция ПроверкаВозможностиПереходаСостояния(ТаблицаПереходов, ТекущееСостояние, СледующееСостояние, Ошибки) Экспорт
	
	Отказ = Ложь;
	Если ТекущееСостояние = СледующееСостояние Тогда 
		Возврат Истина; //допускается безусловный вызов перехода без изменения состояния. например, может меняться дата
	КонецЕсли;	
		
	м = ТаблицаПереходов.НайтиСтроки(Новый Структура("ТекущееСостояние, СледующееСостояние", ТекущееСостояние, СледующееСостояние));
	Если м.Количество() = 0 Тогда 
		Отказ = Истина;	
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПараметрыВСтроку(scmHTTPCервисыOpenAPIСловарь.ПереходВСостояниеНеВозможен(), ТекущееСостояние, СледующееСостояние, "переход не определен в таблице переходов"); 
		Ошибки.Добавить(Новый Структура("errorhandler, context, message", "stm001", "ТаблицаДопустимыхПереходов", ТекстОшибки));
	ИначеЕсли м.Количество() > 1 Тогда 
		Отказ = Истина;	
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПараметрыВСтроку(scmHTTPCервисыOpenAPIСловарь.ПереходВСостояниеНеВозможен(), ТекущееСостояние, СледующееСостояние, "в таблице переходов не детерминирована"); //определено более одного перехода 
		Ошибки.Добавить(Новый Структура("errorhandler, context, message", "stm002", "ТаблицаДопустимыхПереходов", ТекстОшибки));
	Иначе 
		Если Не ПустаяСтрока(м[0].Действие) Тогда 
			Выполнить("Отказ = " + м[0].Действие);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

//Таблица переходов для реализации детерминированной машины переходов состояний
// каждая строка таблицы содержит допустимый переход из текущего в новое состояние и Действие выполняемое при переходе
// допускается вызов отказа при выполнении Действия. Действие с отказом должно добавлять описания причины невозможности перехода в массив Ошибок 
Функция ТаблицаПереходов_ТелеграмБот() Экспорт
	
	ТаблицаПереходов = Новый ТаблицаЗначений();
	ТаблицаПереходов.Колонки.Добавить("ТекущееСостояние");
	ТаблицаПереходов.Колонки.Добавить("Ответ");
	ТаблицаПереходов.Колонки.Добавить("СледующееСостояние");
	ТаблицаПереходов.Колонки.Добавить("Действие");
    Макет = Обработки.scmОбработкаТелеграмБот.ПолучитьМакет("ТаблицаПереходов");
	ИмяОбласти = "R1C4:R" + Формат(Макет.ВысотаТаблицы, "ЧГ=") + "C1";
    ПостроительЗапроса = Новый ПостроительЗапроса;
    ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Макет.Область(ИмяОбласти));
    ПостроительЗапроса.Выполнить();
	Для Каждого т Из ПостроительЗапроса.Результат.Выгрузить() Цикл 
		н = ТаблицаПереходов.Добавить();
		ЗаполнитьЗначенияСвойств(н, т);
		Попытка 
			Выполнить("н.ТекущееСостояние = scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота()." + н.ТекущееСостояние);	
			Выполнить("н.СледующееСостояние = scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота()." + н.СледующееСостояние);	
			Выполнить("н.Ответ = " + н.Ответ);	
		Исключение
		КонецПопытки;	
	//	н.Ответ = НРег(н.Ответ);
	КонецЦикла;	
	
	Возврат ТаблицаПереходов;
		
КонецФункции
Функция ПереходВ_СтартовоеМеню(контекст) Экспорт
	контекст.bot_answer = "Главное меню";
	МассивКнопок = Новый Массив;
	МассивКнопок.Добавить(Строка(scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().СписокНакладных)); 
	МассивКнопок_Строка = Новый Массив;
	МассивКнопок_Строка.Добавить(Строка(scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().СписокАктивныхЗадач)); 
	МассивКнопок_Строка.Добавить(Строка(scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().СписокНакладных)); 
	МассивКнопок.Добавить(МассивКнопок_Строка); 
	МассивКнопок.Добавить("/stop");
	Возврат МассивКнопок;	
КонецФункции

Функция ПереходВ_СписокАктивныхЗадач(контекст) Экспорт	
	
	контекст.bot_answer = "Список задач";
	МассивДействий = Новый Массив;
	МассивДействий.Добавить("<нет активных задач>");
	МассивДействий.Добавить("Назад");
	Возврат МассивДействий;
	
КонецФункции

Функция ПереходВ_ПоискДокуменов(контекст) Экспорт	
	
	контекст.bot_answer = "Список накладных";
	
	МассивДействий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10
		|	СостоянияНакладныхСрезПоследних.Состояние КАК Состояние,
		|	Накладные.Номер КАК Номер,
		|	Накладные.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.scmСостоянияНакладных.СрезПоследних КАК СостоянияНакладныхСрезПоследних
		|		ПРАВОЕ СОЕДИНЕНИЕ Документ.scmНакладныеНаВыполнениеРабот КАК Накладные
		|		ПО СостоянияНакладныхСрезПоследних.Накладная = Накладные.Ссылка
		|ГДЕ
		|	Накладные.Проведен = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	В = РезультатЗапроса.Выбрать();
	
	Пока В.Следующий() Цикл
		МассивДействий.Добавить("Выбрать >" + В.Номер + " от " + Формат(В.Дата,"ДФ=dd.MM.yyyy")+ " [" + В.Состояние + "]");
	КонецЦикла;
	
	МассивДействий.Добавить("Назад");
	Возврат МассивДействий;
	
КонецФункции

Функция ПереходВ_ДокументВыбран(контекст) Экспорт
	chat_text = СтрРазделить(контекст.chat_text,">");
	Документ = СокрЛП(?(chat_text.Количество() = 2, chat_text[1], chat_text[0]));
	контекст.bot_answer = "Документ " + ">" + Документ;
	МассивДействий = Новый Массив;
	МассивДействий.Добавить("Отметить > " + Перечисления.СостояниеНакладной.Принята);
	МассивДействий.Добавить("Отметить > " + Перечисления.СостояниеНакладной.Выполняется);
	МассивДействий.Добавить("Отметить > " + Перечисления.СостояниеНакладной.Завершено);
	МассивДействий.Добавить("Загрузить фото");
	МассивДействий.Добавить("Назад");
	Возврат МассивДействий;	
КонецФункции

Функция ПереходВ_ДокументПодтвердитьИзменения(контекст) Экспорт	
	chat_text = СтрРазделить(контекст.chat_text,">");
	ПоследнееСообщение = РегистрыСведений.scmОчередьЗапросовЧатБота.ПоследнееСообщение(контекст.token, контекст.chat_id, контекст.first_last_name, 0);
//	reply_to_message = СтрРазделить(контекст.reply_to_message.text,">");	
	reply_to_message = СтрРазделить(ПоследнееСообщение.chat_text,">");	
	Документ = reply_to_message[1];
	СледующееСостояние = СокрЛП(?(chat_text.Количество() = 2, chat_text[1], chat_text[0]));
	контекст.bot_answer = Документ + ">" + " подтвержение статус > " + СледующееСостояние;
	МассивДействий = Новый Массив;
	МассивДействий.Добавить("Подтвердить > " + СледующееСостояние);
	МассивДействий.Добавить("Назад");//Назад
	Возврат МассивДействий;	
КонецФункции

Функция ПереходВ_ДокументФотоЗагрузить(контекст) Экспорт	
	chat_text = СтрРазделить(контекст.chat_text,">");
	ПоследнееСообщение = РегистрыСведений.scmОчередьЗапросовЧатБота.ПоследнееСообщение(контекст.token, контекст.chat_id, контекст.first_last_name, 0);
//	reply_to_message = СтрРазделить(контекст.reply_to_message.text,">");	
	reply_to_message = СтрРазделить(ПоследнееСообщение.chat_text,">");	
	document_text = reply_to_message[1];
	СледующееСостояние = Строка(scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().ДокументВыбранФайлЗагрузкаПодтверждение);
	ДокументСсылка = find_doc_by_reply_to_message_text(document_text);

	//Если Не ПустаяСтрока(контекст.photo) Тогда 
	//	Ошибки = scmHTTPCервисыСервер.ТелеграммЧатЗагрузитьФайл(контекст.token.АдресРесурса, контекст.photo, ДокументСсылка);
	//	RespondBodyJSON = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(Ошибки);
	//	контекст.bot_answer = document_text + ">" + " Файл загружен" ;
	//Иначе 	
	контекст.bot_answer = document_text + ">" + " загрузите файл" ;
	//КонецЕсли;
			
	МассивДействий = Новый Массив;
//	МассивДействий.Добавить("Подтвердить > " + СледующееСостояние);
	МассивДействий.Добавить("Назад");//Назад
	Возврат МассивДействий;	
КонецФункции 

Функция ПереходВ_ДокументФотоЗагрузитьПодтверждение(контекст) Экспорт	
	chat_text = СтрРазделить(контекст.chat_text,">");
	ПоследнееСообщение = РегистрыСведений.scmОчередьЗапросовЧатБота.ПоследнееСообщение(контекст.token, контекст.chat_id, контекст.first_last_name, -1);
//	reply_to_message = СтрРазделить(контекст.reply_to_message.text,">");	
	reply_to_message = СтрРазделить(ПоследнееСообщение.chat_text,">");	
	document_text = reply_to_message[1];
	СледующееСостояние = Строка(scmHTTPCервисыOpenAPIПовтИсп.СостоянияБота().ДокументВыбранФайлЗагрузкаПодтверждение);
	ДокументСсылка = find_doc_by_reply_to_message_text(document_text);

	Если Не ПустаяСтрока(контекст.photo) Тогда 
		Ошибки = scmHTTPCервисыСервер.ТелеграммЧатЗагрузитьФайл(контекст.token.АдресРесурса, контекст.photo, ДокументСсылка, контекст);
		RespondBodyJSON = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(Ошибки);
		контекст.bot_answer = document_text + ">" + " Файл загружен" ;
	Иначе 	
		контекст.bot_answer = document_text + ">" + " загрузите файл" ;
	КонецЕсли;
			
	МассивДействий = Новый Массив;
//	МассивДействий.Добавить("Подтвердить > " + СледующееСостояние);
	МассивДействий.Добавить("Назад");//Назад
	Возврат МассивДействий;	
КонецФункции

Функция ПереходВ_ДокументИзмененияПриняты(контекст) Экспорт	
	chat_text = СтрРазделить(контекст.chat_text,">");
	ПоследнееСообщение = РегистрыСведений.scmОчередьЗапросовЧатБота.ПоследнееСообщение(контекст.token, контекст.chat_id, контекст.first_last_name, -1);
//	reply_to_message = СтрРазделить(контекст.reply_to_message.text,">");
	reply_to_message = СтрРазделить(ПоследнееСообщение.chat_text,">");	
	document_text = reply_to_message[1];
	СледующееСостояние = СокрЛП(?(chat_text.Количество() = 2, chat_text[1], chat_text[0]));
	ДокументСсылка = find_doc_by_reply_to_message_text(document_text);

	Для Каждого Стр Из Метаданные.Перечисления.СостояниеНакладной.ЗначенияПеречисления Цикл
	    Если Стр.Синоним = СледующееСостояние Тогда
	        СледующееСостояние = Перечисления.СостояниеНакладной[Стр.Имя];
	        Прервать;
	    КонецЕсли;
	КонецЦикла;
	
	Если Не ДокументСсылка.Пустая() Тогда 
		РегистрыСведений.scmСостоянияНакладных.УстановитьНовоеСостояние(ДокументСсылка, СледующееСостояние,,контекст.first_last_name)			
	КонецЕсли;
	
	контекст.bot_answer = document_text + ">" + " принят статус > " + СледующееСостояние;
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить("К списку документов");
	МассивДействий.Добавить("Главное меню");
	
	Возврат МассивДействий;	
КонецФункции

Функция ПереходВ_ПовторЗапроса(контекст) Экспорт
	контекст.bot_answer = "!переход не определен";
	МассивДействий = Новый Массив;
	//МассивДействий.Добавить("повтор последнего действия");
	МассивДействий.Добавить("/stop");
	Возврат МассивДействий;	
КонецФункции

//---StateMachine_ТелеграмБот

Функция find_doc_by_reply_to_message_text(document_text)
	
	ДокументСсылка = Документы.scmНакладныеНаВыполнениеРабот.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Накладные.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.scmНакладныеНаВыполнениеРабот КАК Накладные
		|ГДЕ
		|	Накладные.Номер = &Номер
		|	И ДЕНЬ(Накладные.Дата) = ДЕНЬ(&Дата)
		|	И Накладные.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("Дата", СтроковыеФункцииКлиентСервер.СтрокаВДату(СокрЛП(СтрРазделить(document_text, "от", Ложь)[1])));
	Запрос.УстановитьПараметр("Номер", СокрЛП(СтрРазделить(document_text, "от")[0]));
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;			
	КонецЦикла;
	Возврат ДокументСсылка;
КонецФункции

#КонецОбласти