#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//методы
	i = 1;
	Для Каждого Шаблон Из Метаданные.HTTPСервисы.scmOpenAPI.ШаблоныURL Цикл 
		Шаблоны = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияМетодов(Шаблон.Шаблон);
		Для Каждого Метод Из Шаблоны Цикл 
			м = Элементы.OpenAPIМетодыОтвет.СписокВыбора.Добавить(Шаблон.Имя + ": " + Метод.Значение["methodtype"] + ": " + Шаблон.Шаблон + " = " + СтрЗаменить(Метод.Ключ, Шаблон.Шаблон, ""));
			м.Представление = "[" + i + "] " + м.Значение;
			i = i + 1;
		КонецЦикла;	
	КонецЦикла;	
	//методы
	
	//запросы
	ЗаполнитьПараметрыСоединенияИзНастроек();
	i = 1;
	Шаблоны = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов();
	Для Каждого Метод Из Шаблоны Цикл                                    
		м = Элементы.OpenAPIМетодыЗапрос.СписокВыбора.Добавить("" + ": " + Метод.Значение["methodtype"] + ": " + Метод.Значение["pattern"] + " = " +  СтрЗаменить(Метод.Ключ, Метод.Значение["pattern"], ""));
		м.Представление = "[" + i + "] " + м.Значение;
	//	i = i + 1;
	КонецЦикла;	
	Элементы.OpenAPIМетодыЗапрос.СписокВыбора.СортироватьПоПредставлению();
	//запросы
	
	УстановитьУсловноеОформлениеТаблицы("requestBodyTree", WebЦвета.ТемноКрасный, ВидСравненияКомпоновкиДанных.Равно, "", "type");
	УстановитьУсловноеОформлениеТаблицы("requestBodyTree", WebЦвета.СероСиний, ВидСравненияКомпоновкиДанных.Содержит, "Array", "type");
	УстановитьУсловноеОформлениеТаблицы("requestBodyTree", WebЦвета.СероСиний, ВидСравненияКомпоновкиДанных.Содержит, "[", "name");
	УстановитьУсловноеОформлениеТаблицы("requestBodyTree", WebЦвета.Красный, ВидСравненияКомпоновкиДанных.Равно, "Да", "req", ВидСравненияКомпоновкиДанных.НеЗаполнено, , "value");
	УстановитьУсловноеОформлениеТаблицы("requestBodyTree", WebЦвета.Красный, ВидСравненияКомпоновкиДанных.Содержит, "!", "value");
	УстановитьУсловноеОформлениеТаблицы("MethodParametrs", WebЦвета.Красный, ВидСравненияКомпоновкиДанных.Равно, "Да", "req", ВидСравненияКомпоновкиДанных.НеЗаполнено, , "value");
	УстановитьУсловноеОформлениеТаблицы("ПараметрыСоединения", WebЦвета.Красный, ВидСравненияКомпоновкиДанных.Равно, "АдресРесурса", "Ключ", ВидСравненияКомпоновкиДанных.НеЗаполнено, , "Значение");
	
	Элементы.ПараметрыСоединения_ИмяСервиса.СписокВыбора.ЗагрузитьЗначения(scmОбщегоНазначенияПовтИсп.СписокПараметровСоединения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПараметрыСоединенияЗначениеПриИзменении();
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеТаблицы(ОформляемоеПолеИмя, ЦветТекста, ВидСравнения1, ПравоеЗначение1 = Неопределено, ПолеИмя1, ВидСравнения2 = Неопределено, ПравоеЗначение2 = Неопределено, ПолеИмя2 = Неопределено)
	                                                      
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);

	ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ОформляемоеПолеИмя + "." + ПолеИмя1);
	ЭлементУсловия.ВидСравнения   = ВидСравнения1;
	ЭлементУсловия.ПравоеЗначение = ПравоеЗначение1;
	ЭлементУсловия.Использование  = Истина;
	Если ВидСравнения2 <> Неопределено Тогда 
		ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ОформляемоеПолеИмя + "." + ПолеИмя2);
		ЭлементУсловия.ВидСравнения   = ВидСравнения2;
		ЭлементУсловия.ПравоеЗначение = ПравоеЗначение2;
		ЭлементУсловия.Использование  = Истина;
	КонецЕсли;
	ОформляемоеПоле      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПолеИмя);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура BodyTreevalueПриИзмененииНаСервере()
	
	Д = РеквизитФормыВЗначение("requestBodyTree");
	RequestBodyJSON = СобратьRequestBodyJSON(Д, ""); //сборка примера тела запроса
	
КонецПроцедуры

&НаКлиенте
Процедура BodyTreevalueПриИзменении(Элемент)
	BodyTreevalueПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура OpenAPIsПриИзмененииНаСервере(ЭтоЗапрос = Ложь)
	
	i = ПодготовитьПараметрыВыбранногоМетода(OpenAPIВыбранныйМетод);
	
	HTTPЗапрос = Новый Структура;
	HTTPЗапрос.Вставить("ПараметрыЗапроса", Новый Соответствие); 
	
	ОпределениеМетода = ?(ЭтоЗапрос, scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов(i.ШаблонРесурс, i.MethodName), scmHTTPCервисыOpenAPIПовтИсп.ОпределенияМетодов(i.ШаблонРесурс, i.MethodName));
	MethodParametrs.Очистить();

	МетодПараметры = ОпределениеМетода["parameters"]; 
	Если Не МетодПараметры = Неопределено Тогда //метод может быть без параметров
		Для Каждого Параметр Из МетодПараметры Цикл 
			t = MethodParametrs.Добавить();
			t.name = Параметр.Ключ;
			t.type = Параметр.Значение.type;
			t.req =  ?(Параметр.Значение.Свойство("req"), Параметр.Значение.req, Ложь);
			t.description = ?(Параметр.Значение.Свойство("description"), Параметр.Значение.description, "");
			Если ЭтоЗапрос Тогда 
				type = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияТипов()[t.type];
				type = СтрЗаменить(type, "Документы", "ДокументСсылка");
				type = СтрЗаменить(type, "Справочники", "СправочникСсылка");
			Иначе
				type = "Строка";// для входящих запросов - параметр всегда строка
			КонецЕсли;	
			Если СтрЧислоВхождений(type, "Макрос") + СтрЧислоВхождений(type, "Array") + СтрЧислоВхождений(type, "Frame") = 0  Тогда //ввод структур и массивов пока не реализован  
				ОписаниеТипа = Новый ОписаниеТипов(type);
		   		t.value = ОписаниеТипа.ПривестиЗначение();
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	//Д = РеквизитФормыВЗначение("requestBodyTree");
	//Д.Строки.Очистить();
	//ЗначениеВРеквизитФормы(Д, "requestBodyTree"); 
	//
	//body = ?(ЭтоЗапрос, ОпределениеМетода["respondBody"], ОпределениеМетода["requestBody"]);
	//
	//Если Не body = Неопределено Тогда 		
	//	CreateBodyTree(Д, body,,,);
	//	Д.Строки.Сортировать("order");
	//	ЗначениеВРеквизитФормы(Д, "requestBodyTree"); 	
	//КонецЕсли;
	
	
//	BodyName = ?(ЭтоЗапрос, "respondBody", "requestBody");

	//обновление тела запроса 
	body = ОпределениеМетода["requestBody"];
	Д = РеквизитФормыВЗначение("requestBodyTree");
	Д.Строки.Очистить();
	ЗначениеВРеквизитФормы(Д, "requestBodyTree"); 
	Если Не body = Неопределено Тогда 		
		CreateBodyTree(Д, body,,,);
		Д.Строки.Сортировать("order");
		ЗначениеВРеквизитФормы(Д, "requestBodyTree"); 	
	КонецЕсли;
	
	
	//обновление тела ответа 
	body = ОпределениеМетода["respondBody"];
	Д = РеквизитФормыВЗначение("respondBodyTree");
	Д.Строки.Очистить();
	ЗначениеВРеквизитФормы(Д, "respondBodyTree"); 
	Если Не body = Неопределено Тогда 		
		CreateBodyTree(Д, body,,,);
		Д.Строки.Сортировать("order");
		ЗначениеВРеквизитФормы(Д, "respondBodyTree"); 	
	КонецЕсли;
	
	Элементы["ДекорацияDescription" + ?(ЭтоЗапрос, 1, 0)].Заголовок = ОпределениеМетода["description"];
	
КонецПроцедуры

&НаКлиенте
Процедура OpenAPIПриИзменении(Элемент)
	
	ЭтоЗапрос = СтрЧислоВхождений(Элемент.Имя, "Запрос") = 1;
	
	OpenAPIsПриИзмененииНаСервере(ЭтоЗапрос);
	MethodParametrsvalueПриИзмененииНаСервере();
	BodyTreevalueПриИзмененииНаСервере();
	
	Если ЭтоЗапрос Тогда 
		ОбновитьЗапросВПараметрыСоединения();
		ПараметрыСоединенияЗначениеПриИзменении();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура MethodParametrsvalueПриИзменении(Элемент)
	
	name = Элементы.MethodParametrs.ТекущиеДанные.name;
	ЭтоЗапрос = ЗначениеЗаполнено(Элементы.OpenAPIМетодыЗапрос.ТекстРедактирования);
//	MethodParametrsvalueПриИзмененииНаСервере(,name);
	Если ЭтоЗапрос Тогда 
		ПересобратьOutgoingParametersНаСервере(name); //только для запросов
		ОбновитьЗапросВПараметрыСоединения(); //только для запросов
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура MakeIncomingRequestНаСервере(ИмяОбработчика)
	
	//Подготовка запроса
	i = ПодготовитьПараметрыВыбранногоМетода(OpenAPIВыбранныйМетод);
	
	Запрос = Новый Структура("ПараметрыURL", Новый Структура("method", i.MethodName));
	ПараметрыЗапроса = Новый Соответствие;
	Для Каждого Parametr Из MethodParametrs Цикл 
		ПараметрыЗапроса.Вставить(Parametr.name, Parametr.value);	
	КонецЦикла;
	Запрос.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	/////////////////////
	//+++эмуляция запроса                                                                 
	Ответ = Новый HTTPСервисОтвет(200, "");
	ОпределениеМетода = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияМетодов(i.ШаблонРесурс, i.MethodName);
	ПараметрыЗапроса = scmHTTPCервисыOpenAPI.ПараметрыМетодаИзЗапроса(Запрос, ОпределениеМетода);
	Ошибки			 = scmHTTPCервисыOpenAPI.ВалидацияПараметровЗапроса(ПараметрыЗапроса, Ответ);
	Если Ошибки.Количество() = 0 Тогда //десериализация табличных частей из ТелаЗапроса не имеет смысла, если обнаружены ошибки на уровне ПараметрыЗапроса
		СтруктураЗапроса = scmHTTPCервисыOpenAPI.ПолучитьСтруктуруТелаЗапроса(RequestBodyJSON, ПараметрыЗапроса, Ответ, Ошибки);
		СтруктураОтвета =  scmHTTPCервисыOpenAPI.ПолучитьСтруктуруТелаОтвета(ПараметрыЗапроса);
		Выполнить("scmHTTPCервисыOpenAPI." + i.Обработчик + "Ответ(i.MethodName, ПараметрыЗапроса, СтруктураЗапроса, СтруктураОтвета, Ответ, Ошибки)");
	КонецЕсли;
	scmHTTPCервисыOpenAPI.ЗаписатьОшибкиВТелоОтвета(Ответ, Ошибки);
	//---эмуляция запроса                                                                 
	/////////////////////             f
	
	//расшифровка ответа для отладки
	StatusCode = "" + Ответ.КодСостояния + " " + Ответ.Причина;
	RespondBodyJSON = Ответ.ПолучитьТелоКакСтроку(); //"UTF-8" //TODO формат убран только для отладки (эмуляции)
	
КонецПроцедуры

&НаКлиенте
Процедура MakeIncomingRequest(Команда)
	MakeIncomingRequestНаСервере(OpenAPIВыбранныйМетод);
КонецПроцедуры

Процедура BodyJSONПриИзмененииНаСервере(ЭтоЗапрос, ИмяТелаЗапроса, ИмяДереваЗапроса, BodyJSON)
	
	Если ПустаяСтрока(BodyJSON) Тогда 
		Возврат;	
	КонецЕсли;
	
	Ошибки = Новый Массив;
	i = ПодготовитьПараметрыВыбранногоМетода(OpenAPIВыбранныйМетод);
	Д = РеквизитФормыВЗначение(ИмяДереваЗапроса); //"requestBodyTree"
	Д.Строки.Очистить();
	
	Если ЭтоЗапрос Тогда 
		ОпределениеМетода = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов(i.ШаблонРесурс, i.MethodName);
		body = ОпределениеМетода[ИмяТелаЗапроса]; //"requestBody"
	Иначе 	
		ОпределениеМетода = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияМетодов(i.ШаблонРесурс, i.MethodName);
		body = ОпределениеМетода[ИмяТелаЗапроса]; //"respondBody"
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(BodyJSON);
	ВходящиеПараметры = ПрочитатьJSON(ЧтениеJSON,,,ФорматДатыJSON.ISO); //TODO передать поля Дата
//	ВходящиеПараметры = ПрочитатьJSON(ЧтениеJSON,,ИменаПолейТипаДата(ПараметрОписание), ФорматДатыJSON.ISO); 
	ЧтениеJSON.Закрыть();

	Запрос = Новый Структура("ПараметрыURL", Новый Структура("method", i.MethodName));
	
	СтруктураЗапроса = Новый Структура;
		
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
		Если ОпределениеМетода["respondBody"] <> Неопределено ИЛИ ОпределениеМетода["requestBody"] <> Неопределено Тогда 
			Для Каждого ПараметрВходящий Из ВходящиеПараметры Цикл   
				СтруктураЗапроса.Вставить(ПараметрВходящий.Ключ, scmHTTPCервисыOpenAPI.ДесериализоватьЗначение(body, ПараметрВходящий, Ошибки,,ВходящиеПараметры));      
				//Если Ошибки.Количество()>0 Тогда 
				//	Прервать;
				//КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	Иначе
		//Ответ = Новый HTTPСервисОтвет(400, "Incorrect body request parameters.");
		//Ответ.Заголовки.Вставить("Content-Type", "text/html;charset=utf-8");
	КонецЕсли;
	
	CreateBodyTree(Д, body, СтруктураЗапроса, , Ошибки); //
	
//	Если Ошибки.Количество()>0 Тогда 
		RespondBodyJSON_errors = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(Ошибки);		
//	КонецЕсли;	
	
	Д.Строки.Сортировать("order");
	ЗначениеВРеквизитФормы(Д, ИмяДереваЗапроса); //"requestBodyTree"
	
КонецПроцедуры

&НаКлиенте
Процедура RequestBodyJSONПриИзменении(Элемент)
	ЭтоЗапрос = ЗначениеЗаполнено(Элементы.OpenAPIМетодыЗапрос.ТекстРедактирования);
	BodyJSONПриИзмененииНаСервере(ЭтоЗапрос, "requestBody", "requestBodyTree", RequestBodyJSON);
КонецПроцедуры

&НаКлиенте
Процедура RespondBodyJSONПриИзменении(Элемент)
	ЭтоЗапрос = ЗначениеЗаполнено(Элементы.OpenAPIМетодыЗапрос.ТекстРедактирования);
	BodyJSONПриИзмененииНаСервере(ЭтоЗапрос, "respondBody", "respondBodyTree", RespondBodyJSON);
КонецПроцедуры

Процедура RequestParametrsStringПриИзмененииНаСервере()
	
	Если ПустаяСтрока(RequestParametrsString) Тогда 
		Возврат;	
	КонецЕсли;
	
	мParametr = СтрРазделить(СтрРазделить(RequestParametrsString, "?")[1], "&");
	Для Каждого м Из мParametr Цикл 
		Для Каждого Parametr Из MethodParametrs Цикл 
			namevalue = СтрРазделить(м, "=");
			Если namevalue[0] = Parametr.name Тогда 
				Parametr.value = namevalue[1];	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура RequestParametrsStringПриИзменении(Элемент)
	RequestParametrsStringПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОтражениеПараметровЗапроса

&НаСервере
Процедура MethodParametrsvalueПриИзмененииНаСервере(Знач patternConvertFunction = "", name = "")
	
	МассивMethod = СтрРазделить(OpenAPIВыбранныйМетод, "=");
	MethodName = СокрЛП(МассивMethod[1]);
	ParametrsString = "";
	Для Каждого Parametr Из MethodParametrs Цикл  
		Если Parametr.req = "Да" ИЛИ (Parametr.req = "Нет" И ЗначениеЗаполнено(Parametr.value) И НЕ Parametr.type = "bool") Тогда //только заполненные (кроме булева)
			ParametrsString = ParametrsString + "&" + Parametr.name + "=" + Parametr.value;
		КонецЕсли;
	КонецЦикла;
	ParametrsString = Сред(ParametrsString, 2);
	//ParametrsString = СобратьСтрокуПараметровЗапроса(MethodParametrs);
	//+++конвертация параметров в паттерн запроса. Пример: 
	Если Не ПустаяСтрока(patternConvertFunction) Тогда
		RequestParametrsString = обработки.scmОтладкаHTTPметодовOpenAPI.КонвертацияПараметроВПаттернЗапроса(MethodName, ParametrsString, patternConvertFunction, name);		
	//---конвертация параметров в паттерн запроса
	Иначе
		RequestParametrsString = MethodName + ?(ПустаяСтрока(ParametrsString), "", "?" + ParametrsString);
	КонецЕсли;	
	
	ЭтаФорма.RequestParametrsString = RequestParametrsString;
	
КонецПроцедуры	

//Заполняет дерево тела параметра запроса/ответа
//Заполняет значения (value) при наличии переданной десериализованной структуры запроса
Функция CreateBodyTree(Дерево, Параметр, СтруктураЗапроса = Неопределено, счетчик = 0, Ошибки = Неопределено) Экспорт
	
	Если Параметр = Неопределено Тогда 
		Возврат Дерево;
	КонецЕсли;	
	
	Для Каждого п Из Параметр Цикл
		
		Д = Дерево.Строки.Добавить();    //добавление строки
		ЗаполнитьЗначенияСвойств(Д, п);
		Д.name = п.Ключ;
		Д.value = "";
		Д.order = счетчик;
		ЗаполнитьЗначенияСвойств(Д, п.Значение);
		
		Если Не СтруктураЗапроса = Неопределено Тогда   //заполнение данными (при наличии)
			Попытка
				Если ТипЗнч(СтруктураЗапроса[п.Ключ]) = Тип("Структура") Тогда 
					Д.value = scmHTTPCервисыOpenAPI.ПредставлениеСтруктуры(СтруктураЗапроса[п.Ключ]);
				Иначе 	
					Д.value = СтруктураЗапроса[п.Ключ];
				КонецЕсли;
			Исключение
				Д.value = "<!>" + ОписаниеОшибки();
				Ошибки.Добавить(Д.value);
			КонецПопытки;
		КонецЕсли;	
		
		Если Не Дерево.Строки.Родитель = Неопределено И Дерево.Строки.Родитель.type = "Array" Тогда  //отметка подчиненных элементов массива
			Д.name = "[" + счетчик + "]" + Д.name;	
		КонецЕсли;	
		
		Если Д.type = "Frame" Тогда  //добавление ветки структуры
			Попытка
				CreateBodyTree(Д, п.Значение.value, ?(СтруктураЗапроса = Неопределено, Неопределено, СтруктураЗапроса[п.Ключ]), 0, Ошибки);
			Исключение
				Д.value = "<!>" + ОписаниеОшибки();
				Ошибки.Добавить(Д.value);
			КонецПопытки;
		КонецЕсли;
		Если Д.type = "Array" Тогда  //добавление ветки массива
			Д.order = 1;
			Если СтруктураЗапроса = Неопределено Тогда 
				СтруктураЗапросаМассив = Новый Массив;
				СтруктураЗапросаМассив.Добавить(); //заглушка - пустой единичный массив
			Иначе
				Попытка
					СтруктураЗапросаМассив = СтруктураЗапроса[п.Ключ];
				Исключение
					СтруктураЗапросаМассив = Новый Массив;
					СтруктураЗапросаМассив.Добавить(); //заглушка - пустой единичный массив
					Д.value = "<!>" + ОписаниеОшибки();
					Ошибки.Добавить(Д.value);
				КонецПопытки;
			КонецЕсли;	
			Для н = 0 По СтруктураЗапросаМассив.Количество() - 1 Цикл 
				CreateBodyTree(Д, п.Значение.value, СтруктураЗапросаМассив[н], н, Ошибки);
			КонецЦикла;	
			Если н = 0 И Д.req = "Да" Тогда 
				Д.value = "<!пустой массив>";
				Ошибки.Добавить(Д.value);
			ИначеЕсли н = 1 И (Д.req = "Нет" ИЛИ Д.req = "") Тогда 
				Д.value = "<пустой массив>";
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Д;
	
КонецФункции

//Собирает пример json тела запроса
Функция СобратьRequestBodyJSON(Дерево, type = Неопределено) 
	
	json = "";
	i = 0;
	iarr = 0;//предыдущий элемент массива
	carr = 0;//текущий элемент массива
	Для Каждого тСтрока Из Дерево.Строки Цикл
		
		carr = ?(СтрЧислоВхождений(тСтрока.name,"[") = 1, Сред(тСтрока.name, 2, 1), carr);
		
		json = json + ?(type = "Array" и iarr <> carr , "{", "");
		
		json = json + """" + тСтрока.name + """" + ":" + ?(ПустаяСтрока(тСтрока.value), """" + """", тСтрока.value);	
		json = json + СобратьRequestBodyJSON(тСтрока, ?(тСтрока.type = "Array", тСтрока.type, Неопределено)); 
		
		json = СтрЗаменить(json, "[0]", ""); //костыль представления номеров строк в дереве
		json = СтрЗаменить(json, "<пустой массив>", ""); //костыль представления массива в дереве
		json = СтрЗаменить(json, "Соответствие", ""); //костыль представления массива в дереве
		
		json = json + ?(type = "Array", ?(Дерево.Строки.Количество()-1 = i, "}", ","), ?(Дерево.Строки.Количество()-1 = i, "", "," + Символы.ПС) );
		
		iarr = carr;
		i = i + 1; 
		
	КонецЦикла;	
	
	Возврат ?(type = Неопределено ИЛИ ПустаяСтрока(json), "", (?(type = "Array", "[", "{")) + Символы.ПС) + json + ?(type = Неопределено ИЛИ ПустаяСтрока(json), "", Символы.ПС + (?(type = "Array", "]", "}")));
	
КонецФункции

Функция ПодготовитьПараметрыВыбранногоМетода(API)

	i = Новый Структура("ШаблонURL, ШаблонРесурс, MethodName, HTTPМетод, Обработчик");
	
	мм = СтрРазделить(API, "=");
	i.MethodName = СокрЛП(мм[1]);
	ш = СтрРазделить(СокрЛП(мм[0]), ":");
	i.ШаблонURL = СокрЛП(ш[0]);
	i.ШаблонРесурс = СокрЛП(ш[2]);
	i.HTTPМетод = СокрЛП(ш[1]);
	Если Не i.ШаблонURL = "" Тогда 
		i.Обработчик = Метаданные.HTTPСервисы.scmOpenAPI.ШаблоныURL[i.ШаблонURL].Методы[i.HTTPМетод].Обработчик;
	КонецЕсли;
	
	Возврат i;
	
КонецФункции

//Функция ПредставлениеСтруктуры(ПереданнаяСтруктура) 
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку();  
//	ЗаписатьJSON(ЗаписьJSON, ПереданнаяСтруктура,,"ФункцияСериализацииJSONОтладка", scmHTTPCервисыOpenAPI);            
//	Результат = ЗаписьJSON.Закрыть();
//	Возврат Результат;
//	
//КонецФункции

#КонецОбласти

#Область ИсходящийЗапрос

&НаКлиенте
Процедура MakeOutgoingRequest(Команда)
	MakeOutgoingRequestНаСервере();
КонецПроцедуры

&НаСервере
Процедура MakeOutgoingRequestНаСервере()
	
	Ошибки =  Новый Массив;
	
	мПараметрыСоединения = Новый Структура();
	Т = РеквизитФормыВЗначение("ПараметрыСоединения");
	Для Каждого тт Из Т Цикл 
		мПараметрыСоединения.Вставить(тт.Ключ, тт.Значение);	
		Если тт.Ключ = "ПортСервера" Тогда 
			мПараметрыСоединения[тт.Ключ] = Число(мПараметрыСоединения[тт.Ключ]);
		КонецЕсли;	
		Если тт.Ключ = "ЗащищенноеСоединение" Тогда 
			мПараметрыСоединения[тт.Ключ] = Булево(мПараметрыСоединения[тт.Ключ]);
		КонецЕсли;	
	КонецЦикла;	
	Если Т.Количество()>0 Тогда 
		i = ПодготовитьПараметрыВыбранногоМетода(OpenAPIВыбранныйМетод);
		Ответ = scmHTTPCервисыСервер.ВыполнитьЗапросКСервису(мПараметрыСоединения, RequestBodyJSON, i.HTTPМетод, StatusCode, Ошибки);
		Если ТипЗнч(Ответ) = Тип("Структура") ИЛИ ТипЗнч(Ответ) = Тип("Массив") Тогда 
			RespondBodyJSON = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(Ответ);
		Иначе	
			RespondBodyJSON = Ответ;
		КонецЕсли;	
	КонецЕсли;
	
	//расшифровка ответа для отладки
	BodyJSONПриИзмененииНаСервере(Истина, "respondBody", "respondBodyTree", RespondBodyJSON);
	//StatusCode = "" + Ответ.КодСостояния + " " + Ответ.Причина;
	//RespondBodyJSON = Ответ.ПолучитьТелоКакСтроку(); //"UTF-8" //TODO формат убран только для отладки (эмуляции)
	RespondBodyJSON_errors = scmHTTPCервисыOpenAPI.РезультатЗаписатьJSON(Ошибки);  
	Если Ошибки.Количество() > 0 Тогда 
		Элементы.ГруппаОшибки.Показать();  
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСоединенияИзНастроек(ЗапросИспользоватьТестовыеНастройки = Истина)
	
	ПараметрыСоединения_ИмяСервиса = Строка(Справочники.scmВнешниеСервисы_ПараметрыСоединения.bot_01);
	мПараметрыСоединения = Новый Структура;
	мПараметрыСоединения.Вставить("ХостСервера"			,"");
	мПараметрыСоединения.Вставить("АдресРесурса"			,""); //МенеджерНастроек._АдресРесурсаDataPhone(ДанныеНастройки)
	мПараметрыСоединения.Вставить("Запрос"				,"");
	мПараметрыСоединения.Вставить("ПортСервера"			,"");
	мПараметрыСоединения.Вставить("ЗащищенноеСоединение"	,Ложь);
	мПараметрыСоединения.Вставить("Пользователь"			,"");
	мПараметрыСоединения.Вставить("Пароль"				,"");
	ЗаполнитьЗначенияСвойств(мПараметрыСоединения, Справочники.scmВнешниеСервисы_ПараметрыСоединения.bot_01); 
	//
	Т = РеквизитФормыВЗначение("ПараметрыСоединения");
	Т.Очистить();
	Для Каждого н Из мПараметрыСоединения Цикл 
		i = Т.Добавить();
		ЗаполнитьЗначенияСвойств(i, н); 
	КонецЦикла;	
	ЗначениеВРеквизитФормы(Т, "ПараметрыСоединения"); 
	
КонецПроцедуры

Процедура ОбновитьЗапросВПараметрыСоединения()
	
	Т = РеквизитФормыВЗначение("ПараметрыСоединения");
	н = Т.НайтиСтроки(Новый Структура("Ключ", "Запрос"));
	н[0].Значение = ЭтотОбъект.RequestParametrsString;
	
	//i = ПодготовитьПараметрыВыбранногоМетода(OpenAPIВыбранныйМетод);  //паттерн метода и АдресРесурса могут совпадать. попытка подстановки АдресРесурса
	//н = Т.НайтиСтроки(Новый Структура("Ключ", "АдресРесурса"));
	//СписокДоступныеАдресРесурса = СписокДоступныеАдресРесурса("АдресРесурса");
	//Если СписокДоступныеАдресРесурса.Найти(i.ШаблонРесурс)<> Неопределено Тогда 
	//	н[0].Значение = i.ШаблонРесурс;
	//Иначе 
	//	н[0].Значение = "";
	//КонецЕсли;	
	
	ЗначениеВРеквизитФормы(Т, "ПараметрыСоединения"); 
	
КонецПроцедуры	
	
&НаКлиенте
Процедура БизнесЕдиницаПриИзменении(Элемент)
	ЗаполнитьПараметрыСоединенияИзНастроек();
//	ОбновитьЗапросВПараметрыСоединения();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСервисовПотоковДанныхПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.НастройкиСервисовПотоковДанных.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда 
		НастройкиСервисовПотоковДанныхПриАктивизацииСтрокиНаСервере(ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастройкиСервисовПотоковДанныхПриАктивизацииСтрокиНаСервере(АдресРесурса);
	
	Т = РеквизитФормыВЗначение("ПараметрыСоединения");
	Для Каждого тт Из Т Цикл 
		Если тт.Ключ = "АдресРесурса" Тогда 
			тт.Значение = АдресРесурса;
		КонецЕсли;	
	КонецЦикла;
	ЗначениеВРеквизитФормы(Т, "ПараметрыСоединения"); 

КонецПроцедуры

&НаСервере
Процедура ПересобратьOutgoingParametersНаСервере(name)
	
	i = ПодготовитьПараметрыВыбранногоМетода(OpenAPIВыбранныйМетод);
	i.Обработчик = "mobilePost";
	ОпределениеМетода = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов(i.ШаблонРесурс, i.MethodName);
	
	ПараметрыЗапроса = Новый Соответствие;
	Для Каждого Parametr Из MethodParametrs Цикл 
		Если name = Parametr.name Тогда 
			ПараметрыЗапроса.Вставить(Parametr.name, Parametr.value); //Не сериализованное значение (для обработчика)	
			Parametr.value = scmHTTPCервисыOpenAPI.СериализоватьЗначение(Parametr.value, ОпределениеМетода["parameters"][Parametr.name], Истина); //сериализованное значение
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Структура("ПараметрыЗапроса", ПараметрыЗапроса);
	
	/////////////////////
	//+++эмуляция запроса для получения тела запроса                                                                
	Ошибки = Новый Массив;
	RequestBodyJSON = "";
	ПараметрыЗапроса = scmHTTPCервисыOpenAPI.ПараметрыМетодаИзЗапроса(Запрос, ОпределениеМетода);
	Выполнить("RequestBodyJSON = scmHTTPCервисыOpenAPI." + i.Обработчик + "Запрос(i.MethodName, ПараметрыЗапроса,,Ошибки)");
	//---эмуляция запроса для получения тела запроса                                                                 
	///////////////////////
	MethodParametrsvalueПриИзмененииНаСервере(ОпределениеМетода["patternConvertFunction"], name); //строка параметров запроса по данным базы
	//////////////////////////
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСоединенияЗначениеПриИзменении()
	ПараметрыСоединенияПредставление = "";
	ЗначенияЗаполнены = Истина;
	Для Каждого э Из ЭтотОбъект.ПараметрыСоединения Цикл 
		Если ЗначениеЗаполнено(э.Значение) И Не (э.Ключ = "ПортСервера" ИЛИ э.Ключ = "ЗащищенноеСоединение")  Тогда 
			ПараметрыСоединенияПредставление = ПараметрыСоединенияПредставление + э.Ключ + "=" + э.Значение + ";";
		КонецЕсли;
		Если э.Ключ = "АдресРесурса" ИЛИ э.Ключ = "Запрос" Тогда  
			ЗначенияЗаполнены = Не ПустаяСтрока(э.Значение);	
		КонецЕсли;	
	КонецЦикла;
	Элементы.ГруппаНастройкиСервисовПотоковДанных.ЗаголовокСвернутогоОтображения = 	ПараметрыСоединенияПредставление;
	Элементы.ГруппаНастройкиСервисовПотоковДанных.ЦветТекстаЗаголовка = ?(ЗначенияЗаполнены, WebЦвета.СероСиний, WebЦвета.Красный);
КонецПроцедуры

&НаСервере
Функция СписокДоступныеХостыСервера()
	
	СС = Новый Массив();
	мПараметрыСоединения = Обработки.scmОтладкаHTTPметодовOpenAPI.ПараметрыСоединения(Истина);
	СС.Добавить(мПараметрыСоединения.ХостСервера); 
	мПараметрыСоединения = Обработки.scmОтладкаHTTPметодовOpenAPI.ПараметрыСоединения(Ложь);
	СС.Добавить(мПараметрыСоединения.ХостСервера); 
	Возврат СС;
	
КонецФункции

&НаСервере
Функция СписокДоступныеПароли()
	
	СС = Новый Массив();
	мПараметрыСоединения = Обработки.scmОтладкаHTTPметодовOpenAPI.ПараметрыСоединения(Истина);
	СС.Добавить(мПараметрыСоединения.Пароль); 
	мПараметрыСоединения = Обработки.scmОтладкаHTTPметодовOpenAPI.ПараметрыСоединения(Ложь);
	СС.Добавить(мПараметрыСоединения.Пароль); 
	Возврат СС;
	
КонецФункции

//пример формирования тела запроса. все что для этого нужно: 1)ссылка 2)имя метода
//замечание: при вызове postOrderData используется getOrderData - это один и тот-же метод, превращающий Заказ в json 
&НаСервере
Процедура ПримерФормированияИсходящегоЗапроса1НаСервере()
	
	ЗаказНаПеремещение = Документы.scmЗапросНаВыполнениеРабот.НайтиПоНомеру("000000004", ТекущаяДата());
	
	MethodName = "create";
	Ошибки = Новый Массив;
	Parametrs = Новый Соответствие;
	Parametrs.Вставить("orderGuid", ЗаказНаПеремещение);
	ОпределениеМетода = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов("/api/3pl/transfer/v1/doc/", MethodName);
	ПараметрыЗапроса = scmHTTPCервисыOpenAPI.ПараметрыМетодаИзЗапроса(Новый Структура("ПараметрыЗапроса", Parametrs), ОпределениеМетода);
	RequestBodyJSON = scmHTTPCервисыOpenAPI.mobilePostЗапрос(MethodName, ПараметрыЗапроса,,); //тело запроса
	ПараметрыСоединения = Обработки.scmОтладкаHTTPметодовOpenAPI.ПараметрыСоединения_АдресРесурсаВнутренняяЛогистикаЗаказы(MethodName);
	respondBodyJSON = scmHTTPCервисыСервер.ВыполнитьЗапросКСервису(ПараметрыСоединения,RequestBodyJSON,ОпределениеМетода["methodtype"], , Ошибки);
		
КонецПроцедуры

&НаКлиенте
Процедура ПримерФормированияИсходящегоЗапроса1(Команда)
	ПримерФормированияИсходящегоЗапроса1НаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСоединения_ИмяСервисаПриИзменении(Элемент)
	
	ПараметрыСоединения_ИмяСервисаПриИзмененииНаСервере();
	ПараметрыСоединенияЗначениеПриИзменении();

КонецПроцедуры

&НаСервере
Процедура ПараметрыСоединения_ИмяСервисаПриИзмененииНаСервере()
	
	СС = scmОбщегоНазначенияПовтИсп.ПараметрыСоединения(ПараметрыСоединения_ИмяСервиса);
	ТТ = РеквизитФормыВЗначение("ПараметрыСоединения");
	Для Каждого КлючЗначение Из СС Цикл 
		н = ТТ.НайтиСтроки(Новый Структура("Ключ", КлючЗначение.Ключ));
		н[0].Значение = КлючЗначение.Значение;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТТ, "ПараметрыСоединения"); 
	
КонецПроцедуры

#КонецОбласти
