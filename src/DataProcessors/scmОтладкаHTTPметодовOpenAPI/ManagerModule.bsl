Функция КонвертацияПараметроВПаттернЗапроса(Знач MethodName, ParametrsString, patternConvertFunction, name = "") Экспорт
	
	мPattern  = СтрРазделить(ParametrsString, "&", Ложь);
	Для Каждого м2 Из мPattern Цикл 
		namevalue = СтрРазделить(м2, "=");  //УниверсальноеВремя(ПараметрДата) - '19700101'                  
		//Если ПустаяСтрока(name) ИЛИ name = namevalue[0] Тогда 
			patternConvertFunction = СтрЗаменить(patternConvertFunction, namevalue[0], namevalue[1]);  
		//КонецЕсли;
	КонецЦикла; 	
	MethodName = ?(СтрЧислоВхождений(patternConvertFunction, MethodName) = 1, "", MethodName);
	RequestParametrsString = MethodName + ?(ПустаяСтрока(patternConvertFunction) ИЛИ ПустаяСтрока(MethodName), "", "/") + patternConvertFunction;
	Возврат RequestParametrsString;	
	
КонецФункции

Функция СобратьСтрокуПараметровЗапроса(MethodParametrs) Экспорт
	
	ParametrsString = "";
	Для Каждого Параметр Из MethodParametrs Цикл  
		Если Параметр.req = "Да" ИЛИ (Параметр.req = "Нет" И ЗначениеЗаполнено(Параметр.value) И НЕ Параметр.type = "bool") Тогда //только заполненные (кроме булева)
			ParametrsString = ParametrsString + "&" + Параметр.name + "=" + Параметр.value;
		КонецЕсли;
	КонецЦикла;
	ParametrsString = Сред(ParametrsString, 2);
	
	Возврат ParametrsString;
	
КонецФункции

Функция ВыполнитьЗапросКСервису(ПС, СтрокаJSON, HTTPМетод = "GET", КодСостояния, МассивОшибокСоединения) Экспорт
	
	Ответ = "";
	Если МассивОшибокСоединения = Неопределено Тогда
		МассивОшибокСоединения = Новый Массив;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПС.ХостСервера) Тогда
		МассивОшибокСоединения.Добавить("не указан хост сервера");
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПС.АдресРесурса) Тогда
		МассивОшибокСоединения.Добавить("не указан адрес ресурса");
	КонецЕсли;	
	Если МассивОшибокСоединения.Количество() > 0 Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(ПС.ХостСервера, ПС.ПортСервера, ПС.Пользователь, ПС.Пароль,,2,?(ПС.ЗащищенноеСоединение=Истина, Новый ЗащищенноеСоединениеOpenSSL, Неопределено)); 
	Исключение
		МассивОшибокСоединения.Добавить(Описаниеошибки());
		Возврат Ответ;
	КонецПопытки;
	
	ПараметрыИБ = СервисыПотоковДанных_ПараметрыИнформационнойБазы();
	HTTPЗапрос = Новый HTTPЗапрос(ПС.АдресРесурса + ПС.Запрос);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json;charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("user-agent",	"OpenAPIdemobase"); 
	Попытка
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Результат = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос, ); //ИмяВыходногоФайла
		КодСостояния = Результат.КодСостояния;
		Ответ = Результат.ПолучитьТелоКакСтроку();
	Исключение
		МассивОшибокСоединения.Добавить(Описаниеошибки());
		Возврат Ответ;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция СервисыПотоковДанных_ПараметрыИнформационнойБазы() Экспорт

	ПараметрыИБ = новый Структура("ИмяСервера,Имябазы","","");
	
	ПараметрыСоединения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	
	Если ПараметрыСоединения.Свойство("Ref") Тогда
		ПараметрыИБ.Имябазы = ПараметрыСоединения.Ref;
	КонецЕсли;
	
	Если ПараметрыСоединения.Свойство("Srvr") Тогда
		ПараметрыИБ.ИмяСервера = ПараметрыСоединения.Srvr;
	КонецЕсли;
	
	Возврат ПараметрыИБ;
	
КонецФункции
