
#Область АРМ

Процедура АРМУстановитьОформлениеКнопкиОбновить(мЭтаФорма, ИмяЭлемента = "Обновить", НеобходимоОбновить) Экспорт 
	
	мЭтаФорма.Элементы[ИмяЭлемента].ЦветФона = ?(НеобходимоОбновить, WebЦвета.Золотой, WebЦвета.Белый);
	
КонецПроцедуры

Процедура АРМСтрокиДереваСвернутьРазвернуть(мФорма, ДеревоИмя, Команда = "") Экспорт
		
	ДействиеРазвернуть = СтрЧислоВхождений(НРег(Команда), "развернуть") = 1;
	КоллекцияДерева = мФорма[ДеревоИмя].ПолучитьЭлементы();
	Для Каждого текСтрока из КоллекцияДерева Цикл
		Если ДействиеРазвернуть Тогда 
			мФорма.Элементы[ДеревоИмя].Развернуть(текСтрока.ПолучитьИдентификатор(), Истина);
		Иначе 	
			мФорма.Элементы[ДеревоИмя].Свернуть(текСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура АРМВосстановитьАктивнуюСтрокуДерева(мФорма, ДеревоИмя, Знач ключАктивнаяСтрока, кэшАктивнаяСтрока) Экспорт
	
	Уровень = Число(Сред(ключАктивнаяСтрока,СтрНайти(ключАктивнаяСтрока,".")-1,1))+1;
	ключАктивнаяСтрока = СтрЗаменить(ключАктивнаяСтрока, "д1", "д");
	ключАктивнаяСтрока = СтрЗаменить(ключАктивнаяСтрока, "д2", "д");
		
	Если Не кэшАктивнаяСтрока = Неопределено Тогда 
		Для Каждого д0 Из мФорма[ДеревоИмя].ПолучитьЭлементы() Цикл 
			д = д0;
			ключ = "";
			Выполнить("ключ = " + ключАктивнаяСтрока);
			Если ключ = кэшАктивнаяСтрока Тогда 
				ИдентификаторСтроки = д0.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
			Для Каждого д1 Из д0.ПолучитьЭлементы() Цикл 
				Если Уровень = 2 Тогда 
					д = д1;
					ключ = "";
					Выполнить("ключ = " + ключАктивнаяСтрока);
					Если ключ = кэшАктивнаяСтрока Тогда 
						ИдентификаторСтроки = д1.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				Иначе 
					Для Каждого д2 Из д1.ПолучитьЭлементы() Цикл 
						д = д2;
						ключ = "";
						Выполнить("ключ = " + ключАктивнаяСтрока);
						Если ключ = кэшАктивнаяСтрока Тогда 
							ИдентификаторСтроки = д2.ПолучитьИдентификатор();	
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		мФорма.Элементы[ДеревоИмя].ТекущаяСтрока = ИдентификаторСтроки;	
	КонецЕсли;	
		
КонецПроцедуры

Процедура АРМПриАктивизацииСтрокиДерева(Элемент, Знач ключАктивнаяСтрока, кэшАктивнаяСтрока) Экспорт
	ключАктивнаяСтрока = СтрЗаменить(ключАктивнаяСтрока, "д1", "д");
	ключАктивнаяСтрока = СтрЗаменить(ключАктивнаяСтрока, "д2", "д");
	д = Элемент.ТекущиеДанные;
	Если д <> Неопределено Тогда
		Выполнить("кэшАктивнаяСтрока = " + ключАктивнаяСтрока);
	КонецЕсли;
КонецПроцедуры

Процедура АРМУстановитьСнятьПометкиДерева(ДеревоФормы, Команда) Экспорт 
	Пометка = СтрЧислоВхождений(НРег(Команда),"установить") = 1;
	КоллекцияДерева = ДеревоФормы.ПолучитьЭлементы();
	Для каждого текЭлемент1 из КоллекцияДерева Цикл
		КоллекцияЭлемента1 = текЭлемент1.ПолучитьЭлементы();
		Для каждого текЭлемент2 из КоллекцияЭлемента1 Цикл
			текЭлемент2.Пометка = Пометка;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура АРМУстановитьСнятьФлажокПодчиненныхРекурсивно(текДанные, ЗначениеФлажка, ИмяФлажка = "Пометка") Экспорт

	КоллекцияСтроки = текДанные.ПолучитьЭлементы();
	Для каждого текСтрока из КоллекцияСтроки Цикл
		текСтрока[ИмяФлажка] = ЗначениеФлажка;
		АРМУстановитьСнятьФлажокПодчиненныхРекурсивно(текСтрока, ЗначениеФлажка, ИмяФлажка);
	КонецЦикла;

КонецПроцедуры

Процедура АРМУстановитьСнятьФлажокРодителейРекурсивно(текДанные, ЗначениеФлажка)  Экспорт
	
	Родитель = текДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		КоллекцияСтроки 	= Родитель.ПолучитьЭлементы();
		НайденныеЭлементы 	= scmОбщегоНазначенияКлиентСервер.АРМНайтиСтрокиДерева(КоллекцияСтроки, Новый Структура("Пометка", Истина)); 
		Родитель.Пометка 	= НайденныеЭлементы.Количество() <> 0;
		АРМУстановитьСнятьФлажокРодителейРекурсивно(Родитель, ЗначениеФлажка);
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьФормуСозданныхДокументов(ВидДокумента, СтруктураПараметров) Экспорт
	
	Для текИндекс = 0 По СтруктураПараметров.МассивДокументовКоличество - 1 Цикл
		
		ФормаДокумента = ПолучитьФорму("Документ." + ВидДокумента + ".ФормаОбъекта",,, Истина);
		ОбъектФормы = ФормаДокумента.Объект;
		
		scmОбщегоНазначенияВызовСервера.ЗаполнитьФормуНовогоДокументаНаСервере(ОбъектФормы, текИндекс, СтруктураПараметров.АдресХранилища);
		КопироватьДанныеФормы(ОбъектФормы, ФормаДокумента.Объект); 
		
	//	Попытка
			ФормаДокумента.ПриЧтенииСозданииНаСервере(); //процедура должна быть экспортной
		//Исключение
		//КонецПопытки;

		ФормаДокумента.Открыть();	
		
	КонецЦикла;
					
КонецПроцедуры

#КонецОбласти

#Область Служебные

// Возвращает результат поиска значения в дереве 
//
// Параметры:
//  Строки		 - 	 - 
//  ИмяКолонки	 - 	 - 
//  Значение	 - 	 - 
//  Содержит	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ДанныеФормыДеревоСодержитЗначение(Строки, ИмяКолонки, Значение, Содержит) Экспорт 
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если СтрокаДерева[ИмяКолонки] = Значение Тогда 
			Содержит = Истина;
			Прервать;
		КонецЕсли;	
        ПодчиненныеСтроки  = СтрокаДерева.ПолучитьЭлементы();
         
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ДанныеФормыДеревоСодержитЗначение(ПодчиненныеСтроки, ИмяКолонки, Значение, Содержит)
        КонецЕсли;
		
	КонецЦикла;
	
	Возврат Содержит;
	
КонецФункции

Процедура ОткрытьТочкуКартыМаршрутаБизнесПроцесса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт 
		
	ОткрытьФорму("Обработка.КартаМаршрутаБизнесПроцесса.Форма", 
		Новый Структура("БизнесПроцесс", ПараметрКоманды), 
		ПараметрыВыполненияКоманды.Источник, 
		ПараметрыВыполненияКоманды.Уникальность, 
		ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры	
		
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	//Если ИмяСобытия = "ОбновитьСостояниеОбменаСУПП" И Параметр = Источник.Ссылка Тогда
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ИнфоДата(Дата, ФорматнаяСтрока = "ДеньНедели + "", день года: "" + ДеньГода(Дата) + "", неделя: "" + НеделяГода(Дата)") Экспорт 	
	Результат = ""; 
	ДеньНедели = ""; 	
	Если ЗначениеЗаполнено(Дата)  Тогда
		НомерДеньНедели = ДеньНедели(Дата);
		Если 		НомерДеньНедели = 1 Тогда ДеньНедели = "Понедельник";
		ИначеЕсли 	НомерДеньНедели = 2 Тогда ДеньНедели = "Вторник";	
		ИначеЕсли 	НомерДеньНедели = 3 Тогда ДеньНедели = "Среда";	
		ИначеЕсли 	НомерДеньНедели = 4 Тогда ДеньНедели = "Четверг";	
		ИначеЕсли 	НомерДеньНедели = 5 Тогда ДеньНедели = "Пятница";	
		ИначеЕсли 	НомерДеньНедели = 6 Тогда ДеньНедели = "Суббота";	
		ИначеЕсли 	НомерДеньНедели = 7 Тогда ДеньНедели = "Воскресенье";	
		КонецЕсли;               
		Выполнить("Результат = " + ФорматнаяСтрока);
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции 

#КонецОбласти  

#Область ПроверкаСтатусаСпецификации

Процедура ЗапуститьПроверкуСтатусаСпецификации(Форма) Экспорт
				
	Если Форма.Элементы.Найти("Подключаемый_СтатусСпецификацияПроекта") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеКонтекста = ДанныеКонтекстаДляПодсказки(Форма);
	Если ДанныеКонтекста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = scmОбщегоНазначенияВызовСервера.ОбновитьПодсказкуФормыВФоне(ДанныеКонтекста, Форма.УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма", Форма);
	ПараметрыЗавершения.Вставить("ДанныеКонтекста", ДанныеКонтекста);
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения("ОбновитьПодсказкуФормыЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры   

Функция ДанныеКонтекстаДляПодсказки(Форма)
	
	ДанныеКонтекста = Новый Структура;
	ДанныеКонтекста.Вставить("Предмет",            Форма.Объект.Ссылка);		
	Возврат ДанныеКонтекста;
	
КонецФункции

// Асинхронная процедура отображения подсказок.
// См. ОбновитьПодсказкуФормы.
Процедура ОбновитьПодсказкуФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ Не Результат.Свойство("АдресРезультата")
		ИЛИ Не Результат.Свойство("АдресДополнительногоРезультата") Тогда
		
		Возврат;
	КонецЕсли;
	
	РезультатСтруктура = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Не ЗначениеЗаполнено(РезультатСтруктура)
		ИЛИ ТипЗнч(РезультатСтруктура) <> Тип("Структура") Тогда
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ЗначениеЗаполнено(РезультатСтруктура.БизнесПроцесс) Тогда 
		Форма.Элементы.Подключаемый_СтатусСпецификацияПроекта.Видимость = Истина;
		Форма.Подключаемый_СтатусСпецификацияПроекта = ?(РезультатСтруктура.Завершен, "" + РезультатСтруктура.Статус + " " + РезультатСтруктура.Исполнитель + " " + РезультатСтруктура.ДатаЗавершения, "в процессе согласования");
		Форма.Подключаемый_СтатусСпецификацияПроекта_БизнесПроцесс = РезультатСтруктура.БизнесПроцесс;  		
	Иначе 
		Форма.Элементы.Подключаемый_СтатусСпецификацияПроекта.Видимость = Ложь;
	КонецЕсли;
 
КонецПроцедуры


#КонецОбласти 