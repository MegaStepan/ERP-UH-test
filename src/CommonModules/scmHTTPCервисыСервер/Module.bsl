
#Область Debug

Процедура ОтладкаМетодовOpenAPI(methodName = "", errorhandler = "", context, Ошибки, parameters, RequestBodyJSON = "", RespondBodyJSON = "", ИмяСервиса = "", chat_id = "") Экспорт 
		
	НастройкиОтладки = scmОбщегоНазначенияПовтИсп.НастройкиОтладки(ИмяСервиса);
	
	Если Не ПустаяСтрока(НастройкиОтладки.bot_id) И Не ПустаяСтрока(НастройкиОтладки.chat_id) Тогда  
		Ошибки = ТелеграммЧатОтправитьТекст(НастройкиОтладки.bot_id, НастройкиОтладки.chat_id, 0, errorhandler + "; " + methodName + "; " + context+ ";");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСообщенияТелеграммЧат(bot_id, offset, Ошибки = Неопределено, RespondBodyJSON = "") Экспорт
	
	СтруктураОтвета = Новый Структура;
	Если Ошибки = Неопределено Тогда 
		Ошибки = Новый Массив;
	КонецЕсли;	
	
	//Сборка запроса
	MethodName_OpenAPI = "getUpdates";
	ОпределениеМетодаOpenAPI = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов("/TelegramBot/", MethodName_OpenAPI);
	ОпределениеМетодаOpenAPI["parameters"]["offset"] = offset;
	RequestBodyJSON = scmHTTPCервисыOpenAPI.mobilePostЗапрос(MethodName_OpenAPI, ОпределениеМетодаOpenAPI["parameters"],,); //тело запроса//ПараметрыЗапроса
	//Выполнение запроса
	КодСостояния = 0;
	ПараметрыСоединения = Новый Структура("АдресРесурса, ХостСервера, ПортСервера, ЗащищенноеСоединение, Пользователь, Пароль, Запрос", bot_id , "api.telegram.org", 443, Истина, ,); 
	ПараметрыСоединения.Запрос = MethodName_OpenAPI + "?offset=" + Формат(ОпределениеМетодаOpenAPI["parameters"]["offset"],"ЧГ=");
	RespondBodyJSON = scmHTTPCервисыСервер.ВыполнитьЗапросКСервису(ПараметрыСоединения, RequestBodyJSON, ОпределениеМетодаOpenAPI["methodtype"], КодСостояния, Ошибки);
	Если Ошибки.Количество() = 0 И (КодСостояния > 300 ИЛИ ПустаяСтрока(RespondBodyJSON)) Тогда 
		Ошибки.Добавить("Ошибка выполнения запроса: " + ПараметрыСоединения.АдресРесурса + ПараметрыСоединения.Запрос); 	
	КонецЕсли;
	
	Если Ошибки.Количество() = 0 Тогда 
		//Расшифровка ответа
		body = ОпределениеМетодаOpenAPI["respondBody"]; //"respondBody"
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(RespondBodyJSON);
		ВходящиеПараметры = ПрочитатьJSON(ЧтениеJSON,,,ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
			
		Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
			Для Каждого ПараметрВходящий Из ВходящиеПараметры Цикл   
				СтруктураОтвета.Вставить(ПараметрВходящий.Ключ, scmHTTPCервисыOpenAPI.ДесериализоватьЗначение(body, ПараметрВходящий, Ошибки,,ВходящиеПараметры));      
			КонецЦикла;
		Иначе
			Ответ = Новый HTTPСервисОтвет(400, "Incorrect body request parameters.");
			Ответ.Заголовки.Вставить("Content-Type", "text/html;charset=utf-8");
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ТелеграммЧатОтправитьТекст(bot_id, chat_id, message_id = 0, respond, Ошибки = Неопределено) Экспорт
	
	КодСостояния = 0;
	Если Ошибки = Неопределено Тогда 
		Ошибки = Новый Массив;
	КонецЕсли;	
	
	ПараметрыСоединения = Новый Структура("АдресРесурса, ХостСервера, ПортСервера, ЗащищенноеСоединение, Пользователь, Пароль, Запрос", bot_id , "api.telegram.org", 443, Истина, ,); 
	//Сборка запроса
	Если message_id = 0  Тогда 
		MethodName_OpenAPI = "sendMessage";
		ОпределениеМетодаOpenAPI = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов("/TelegramBot/", MethodName_OpenAPI);
		ОпределениеМетодаOpenAPI["parameters"]["chat_id"] = chat_id;
		ОпределениеМетодаOpenAPI["parameters"]["text"] = respond.text;
		ОпределениеМетодаOpenAPI["parameters"]["reply_markup"] = respond.reply_markup;
		ПараметрыСоединения.Запрос = MethodName_OpenAPI + "?chat_id=" + ОпределениеМетодаOpenAPI["parameters"]["chat_id"] + "&text=" + ОпределениеМетодаOpenAPI["parameters"]["text"] + ?(ОпределениеМетодаOpenAPI["parameters"]["reply_markup"] = "null", "", "&reply_markup=" + ОпределениеМетодаOpenAPI["parameters"]["reply_markup"]);
	Иначе 	
		MethodName_OpenAPI = "editMessageReplyMarkup";
		ОпределениеМетодаOpenAPI = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов("/TelegramBot/", MethodName_OpenAPI);
		ОпределениеМетодаOpenAPI["parameters"]["chat_id"] = chat_id;
		ОпределениеМетодаOpenAPI["parameters"]["message_id"] = message_id;
		ОпределениеМетодаOpenAPI["parameters"]["reply_markup"] = respond.reply_markup;
		ПараметрыСоединения.Запрос = MethodName_OpenAPI + "?chat_id=" + ОпределениеМетодаOpenAPI["parameters"]["chat_id"] + "&message_id=" + Формат(message_id, "ЧГ=") + ?(ОпределениеМетодаOpenAPI["parameters"]["reply_markup"] = "null", "", "&reply_markup=" + ОпределениеМетодаOpenAPI["parameters"]["reply_markup"]);
	КонецЕсли;
	//Выполнение запроса
	
	RespondBodyJSON = scmHTTPCервисыСервер.ВыполнитьЗапросКСервису(ПараметрыСоединения, , ОпределениеМетодаOpenAPI["methodtype"], КодСостояния, Ошибки);
	Если КодСостояния > 300 Тогда 
		Ошибки.Добавить(RespondBodyJSON); 	
	КонецЕсли;
	Возврат Ошибки;
	
КонецФункции

Функция ТелеграммЧатЗагрузитьФайл(bot_id, photo, ДокументСсылка, контекст, Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда 
		Ошибки = Новый Массив;
	КонецЕсли;	
	
	//Сборка запроса
	MethodName_OpenAPI = "getFile";
	ОпределениеМетодаOpenAPI = scmHTTPCервисыOpenAPIПовтИсп.ОпределенияЗапросов("/TelegramBot/", MethodName_OpenAPI);
	ОпределениеМетодаOpenAPI["parameters"]["file_id"] = photo.file_id;
	//Выполнение запроса
	КодСостояния = 0;
	ПараметрыСоединения = Новый Структура("АдресРесурса, ХостСервера, ПортСервера, ЗащищенноеСоединение, Пользователь, Пароль, Запрос", bot_id , "api.telegram.org", 443, Истина, ,); 
	ПараметрыСоединения.Запрос = MethodName_OpenAPI + "?file_id=" + ОпределениеМетодаOpenAPI["parameters"]["file_id"];
	RespondBodyJSON = scmHTTPCервисыСервер.ВыполнитьЗапросКСервису(ПараметрыСоединения, , ОпределениеМетодаOpenAPI["methodtype"], КодСостояния, Ошибки);
	Если RespondBodyJSON = "" Тогда
		ВызватьИсключение ("Пустой ответ: ВыполнитьЗапросКСервису=" + ПараметрыСоединения.Запрос);
	КонецЕсли;	
	//Расшифровка ответа
	body = ОпределениеМетодаOpenAPI["respondBody"];
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(RespondBodyJSON);
	ВходящиеПараметры = ПрочитатьJSON(ЧтениеJSON,,,ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();
	//ТОDО - нет необходимости десериализации - убрать
	СтруктураОтвета = Новый Структура;		
	Если ТипЗнч(ВходящиеПараметры) = Тип("Структура") Тогда
		Для Каждого ПараметрВходящий Из ВходящиеПараметры Цикл   
			СтруктураОтвета.Вставить(ПараметрВходящий.Ключ, scmHTTPCервисыOpenAPI.ДесериализоватьЗначение(body, ПараметрВходящий, Ошибки,,ВходящиеПараметры));      
		КонецЦикла;
	Иначе
		Ответ = Новый HTTPСервисОтвет(400, "Incorrect body request parameters.");
		Ответ.Заголовки.Вставить("Content-Type", "text/html;charset=utf-8");
	КонецЕсли;
	
	Если КодСостояния > 300 Тогда 
		Ошибки.Добавить(RespondBodyJSON); 
	Иначе 
	//скачивание файла TODO переделать в асинхронное скачивание
		ИмяВременногоФайла = scmHTTPCервисыСервер.ЗагрузитьФайлИзСервиса(ПараметрыСоединения, "/file"+ПараметрыСоединения.АдресРесурса + СтруктураОтвета.result.file_path,, КодСостояния, Ошибки);
		Сообщить(ИмяВременногоФайла);
		Если Ошибки.Количество() > 0 Тогда 
			контекст.error = СтрСоединить(Ошибки,";");
			РегистрыСведений.scmОчередьЗапросовЧатБота.ДобавитьСообщениеВОчередь(bot_id, контекст);
		Иначе	
			//+++прикрепление файла
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
			ТекущаяДата = ТекущаяДатаСеанса();
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Справочники.Пользователи.ПустаяСсылка());//TODO переделать на соответвие from Пользователи.АвторизованныйПользователь()
			ПараметрыФайла.Вставить("ВладелецФайлов", ДокументСсылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения", "telegram" + " " + Формат(ТекущаяДата, "ДФ='dd.MM.yyyy ЧЧ.мм.сс'"));
			ПараметрыФайла.Вставить("РасширениеБезТочки", "jpg");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДата);
			
			Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище, Неопределено, контекст.first_last_name);
			
			УдалитьФайлы(ИмяВременногоФайла);
			//---прикрепление файла
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

#КонецОбласти

Процедура ОбработкаОтветовТелеграм_Обработать_getUpdatesНаСервере() Экспорт 
	Если Константы.ТелеграмБотыВключены.Получить() Тогда 
		token = Справочники.ВнешниеСервисы_ПараметрыСоединения.bot_01;
//		кешНастройкиОтладки = scmОбщегоНазначенияПовтИсп.ПараметрыСоединения(token);	
		Обработки.scmОбработкаТелеграмБот.Обработать_getUpdatesНаСервере(token);		
	КонецЕсли;
КонецПроцедуры	

Функция ВыполнитьЗапросКСервису(ПС, СтрокаJSON, HTTPМетод = "GET", КодСостояния, МассивОшибокСоединения) Экспорт
	
	Ответ = "";
	Если МассивОшибокСоединения = Неопределено Тогда
		МассивОшибокСоединения = Новый Массив;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПС.ХостСервера) Тогда
		МассивОшибокСоединения.Добавить("не указан хост сервера");
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПС.АдресРесурса) Тогда
		МассивОшибокСоединения.Добавить("не указан адрес ресурса");
	КонецЕсли;	
	Если МассивОшибокСоединения.Количество() > 0 Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(ПС.ХостСервера, ПС.ПортСервера, ПС.Пользователь, ПС.Пароль,,1,?(ПС.ЗащищенноеСоединение=Истина, Новый ЗащищенноеСоединениеOpenSSL, Неопределено)); 
	Исключение
		МассивОшибокСоединения.Добавить(Описаниеошибки());
		Возврат Ответ;
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПС.АдресРесурса + ПС.Запрос);

	Попытка
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Результат = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос,);
		КодСостояния = Результат.КодСостояния;
		Ответ = Результат.ПолучитьТелоКакСтроку();
	Исключение
		МассивОшибокСоединения.Добавить(Описаниеошибки());
		Возврат Ответ;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ЗагрузитьФайлИзСервиса(ПС, АдресРесурса, HTTPМетод = "GET", КодСостояния, МассивОшибокСоединения) Экспорт
	
	Ответ = "";
	Если МассивОшибокСоединения = Неопределено Тогда
		МассивОшибокСоединения = Новый Массив;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПС.ХостСервера) Тогда
		МассивОшибокСоединения.Добавить("не указан хост сервера");
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПС.АдресРесурса) Тогда
		МассивОшибокСоединения.Добавить("не указан адрес ресурса");
	КонецЕсли;	
	Если МассивОшибокСоединения.Количество() > 0 Тогда
		Возврат Ответ;
	КонецЕсли; 
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(ПС.ХостСервера, ПС.ПортСервера, ПС.Пользователь, ПС.Пароль,,1,?(ПС.ЗащищенноеСоединение=Истина, Новый ЗащищенноеСоединениеOpenSSL, Неопределено)); 
	Исключение
		МассивОшибокСоединения.Добавить(Описаниеошибки());
		Возврат Ответ;
	КонецПопытки;
	
	//ПараметрыИБ = СервисыПотоковДанных_ПараметрыИнформационнойБазы();
	//Если СтрЧислоВхождений(ПС.Запрос, "АдресРесурса") = 1 Тогда 
	//	HTTPЗапрос = Новый HTTPЗапрос(СтрЗаменить(ПС.Запрос, "АдресРесурса", ПС.АдресРесурса));
	//	Сообщить(СтрЗаменить(ПС.Запрос, "АдресРесурса", ПС.АдресРесурса));
	//Иначе 	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	//КонецЕсли;
	//HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json;charset=utf-8");
	//HTTPЗапрос.Заголовки.Вставить("user-agent",	"Chrome/36.0.1985.125"); 

	Попытка
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("jpg");
		//HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		Результат = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос, ИмяВыходногоФайла); //ИмяВыходногоФайла
		КодСостояния = Результат.КодСостояния;
		Ответ = Результат.ПолучитьИмяФайлаТела();
	Исключение
		МассивОшибокСоединения.Добавить(Описаниеошибки());
		Возврат Ответ;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции
