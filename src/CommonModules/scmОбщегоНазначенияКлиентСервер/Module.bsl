#Область АРМ

//&НаКлиентеНаСервереБезКонтекста
Функция АРМНайтиСтрокиДерева(КоллекцияСтрок, СтруктураОтбора, Рекурсивно = Ложь) Экспорт
	
	МассивНайдено = Новый Массив;
	
	Для каждого текСтрока из КоллекцияСтрок Цикл
		
		фНайден = Истина;
		Для каждого текЭлемент из СтруктураОтбора Цикл
			Если текСтрока[текЭлемент.Ключ] <> текЭлемент.Значение Тогда
				фНайден = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если фНайден Тогда
			МассивНайдено.Добавить(текСтрока);
		КонецЕсли;
		
		Если Рекурсивно Тогда
			МассивНайденоПодчиненные = АРМНайтиСтрокиДерева(текСтрока.ПолучитьЭлементы(), СтруктураОтбора, Рекурсивно);
			Для каждого текНайденный из МассивНайденоПодчиненные Цикл
				МассивНайдено.Добавить(текНайденный);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивНайдено;
	
КонецФункции

Функция НайтиСтрокиДерева(стОтбор, ЭлементФормыДерево) Экспорт
	
	Результат = Новый Массив;
	Если стОтбор.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КоллекцияДерева = ЭлементФормыДерево.ПолучитьЭлементы();
	
	НайденныеСтроки = Неопределено;
	
	//поиск идет в два этапа: 
	//1. рекурсивно находятся строки с первым значением отбора, 
	//2. остальные поля уже ищутся в найденном массиве, а не во всем дереве
	Для каждого текЭлементОтбора из стОтбор Цикл
		
		Если НайденныеСтроки = Неопределено Тогда
			НайденныеСтроки = ПоискПоДеревоРекурсией(КоллекцияДерева, текЭлементОтбора.Ключ, текЭлементОтбора.Значение);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Для каждого текСтрока из НайденныеСтроки Цикл
				Если текСтрока[текЭлементОтбора.Ключ] = текЭлементОтбора.Значение Тогда
					Результат.Добавить(текСтрока);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ПоискПоДеревоРекурсией(ЭлементыДерева, ЛевоеЗнч, ПравоеЗнч)
	
	НайденныеСтроки = Новый  Массив;
	
	Для каждого текЭлемент из ЭлементыДерева Цикл
		Если текЭлемент[ЛевоеЗнч] = ПравоеЗнч Тогда
			НайденныеСтроки.Добавить(текЭлемент);
		КонецЕсли;		
		
		НайденныеСтрокиНиже = ПоискПоДеревоРекурсией(текЭлемент.ПолучитьЭлементы(), ЛевоеЗнч, ПравоеЗнч);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеСтроки, НайденныеСтрокиНиже);
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьИтоговыеПоказателиДереваФормы(Форма, ИмяТаблицы, КолонкиИтогов, Уровень = 0) Экспорт	
	
	Для Каждого м Из СтрРазделить(КолонкиИтогов, ", ", Ложь) Цикл
		Форма["Итог" + ИмяТаблицы + м] = 0;
	КонецЦикла;
	Для Каждого СтрокаДерева0 Из Форма[ИмяТаблицы].ПолучитьЭлементы() Цикл 
		Если СтрокаДерева0.ПолучитьЭлементы().Количество()>0 Тогда 
			Для Каждого м Из СтрРазделить(КолонкиИтогов, ", ", Ложь) Цикл
				СтрокаДерева0[м] = 0;
			КонецЦикла;
		КонецЕсли;
		Для Каждого СтрокаДерева1 Из СтрокаДерева0.ПолучитьЭлементы() Цикл
			Если  СтрокаДерева1.ПолучитьЭлементы().Количество()>0 Тогда 
				Для Каждого м Из СтрРазделить(КолонкиИтогов, ", ", Ложь) Цикл
					СтрокаДерева1[м] = 0;
				КонецЦикла;
			КонецЕсли;
			Для Каждого СтрокаДерева2 Из СтрокаДерева1.ПолучитьЭлементы() Цикл 
				Для Каждого м Из СтрРазделить(КолонкиИтогов, ", ", Ложь) Цикл
					СтрокаДерева1[м] = СтрокаДерева1[м] + СтрокаДерева2[м];
				КонецЦикла;						
			КонецЦикла;
			Для Каждого м Из СтрРазделить(КолонкиИтогов, ", ", Ложь) Цикл
				СтрокаДерева0[м] = СтрокаДерева0[м] + СтрокаДерева1[м];
			КонецЦикла;						
		КонецЦикла;
		
		Для Каждого м Из СтрРазделить(КолонкиИтогов, ", ", Ложь) Цикл
			Форма["Итог" + ИмяТаблицы + м] = Форма["Итог" + ИмяТаблицы + м] + СтрокаДерева0[м];
		КонецЦикла;
	КонецЦикла;
	
	//РассчитатьИтоговыеПоказатели(Форма);
	
КонецФункции
#КонецОбласти

#Область СпецификацииДоступностьФормыПоРолям

Процедура УстановитьВидимостьДоступностьПоТаблицеРолей(Форма, ЭлементыФормы, ТаблицаРолей, УстанавливатьДляПодчиненных = Истина) Экспорт
	Для Каждого Элемент Из ТаблицаРолей Цикл 
		УстановитьВидимостьДоступностьПоРоли(Форма, ЭлементыФормы, Элемент.ИмяЭлемента, Элемент.Доступность, УстанавливатьДляПодчиненных);
	КонецЦикла;
КонецПроцедуры

//Доработанная копия типовой рекурсивной ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы
// Устанавливает значение свойства элемента формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента.
//
Процедура УстановитьВидимостьДоступностьПоРоли(Форма, ЭлементыФормы, ИмяЭлемента, Доступность, УстанавливатьДляПодчиненных) 
	
	Если ИмяЭлемента = "ЭтаФорма" Тогда 
		Форма.ТолькоПросмотр 	= Не Доступность;
	Иначе
		Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
		Значение    = ?(Доступность >= 1, Истина, Ложь);
		Если Элемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			ИмяСвойства = "Доступность";
			Значение    = Значение;
		Иначе
			ИмяСвойства = "ТолькоПросмотр";
			Значение    = НЕ Значение;
		КонецЕсли;
		Элемент[ИмяСвойства] 	= Значение;
		
		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			УстанавливатьДляПодчиненных = Ложь;
		КонецЕсли;
		
		ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("ФормаКлиентскогоПриложения, ГруппаФормы, ТаблицаФормы");
		Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
			Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
				УстановитьВидимостьДоступностьПоРоли(Форма, ЭлементыФормы, ПодчиненныйЭлемент.Имя, Доступность, УстанавливатьДляПодчиненных);
			КонецЦикла;
	 	КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаЗагрузкаНоменклатуры

Функция НастройкиПоискаНоменклатурыПоКолонкамExcelПоУмолчанию() Экспорт
	
	СтруктураНастроек = Новый Структура("ПутьКФайлу, СпособПоиска, СпособПоискаПорогНечеткости", "", 1, 10);	
	СтруктураНастроек.Вставить("НомерПервойСтроки", 4);
	СтруктураНастроек.Вставить("НомерЛиста", 1);
	СтруктураНастроек.Вставить("НомерЛистаУказанВручную", Ложь);
	СтруктураНастроек.Вставить("АвтоопределениеНомеровКолонок", Ложь);
	НН = Новый Массив();
	НН.Добавить(Новый Структура("ИмяРеквизита, ТипРеквизита, НомерКолонки, НомерЛиста, ВидСравнения, НомераПопыток, АвтоопределениеНомеровКолонок", "Артикул", "Строка", 4, 1, 							"=", "1,2,4", "тип, марка, артикул"));
	НН.Добавить(Новый Структура("ИмяРеквизита, ТипРеквизита, НомерКолонки, НомерЛиста, ВидСравнения, НомераПопыток, АвтоопределениеНомеровКолонок", "Наименование", "Строка", 3, 1, 					"=", "1,2,3,6", "наименование, характеристика, номенклатура"));
	НН.Добавить(Новый Структура("ИмяРеквизита, ТипРеквизита, НомерКолонки, НомерЛиста, ВидСравнения, НомераПопыток, АвтоопределениеНомеровКолонок", "scmКодОборудования", "Строка", 5, 1, 				"=",     "3,5", "код оборудования, код продукции"));
	НН.Добавить(Новый Структура("ИмяРеквизита, ТипРеквизита, НомерКолонки, НомерЛиста, ВидСравнения, НомераПопыток, АвтоопределениеНомеровКолонок", "Производитель", "Справочник.Производители", 6, 1, 	"=", "1", "завод, производитель, поставщик"));
	НН.Добавить(Новый Структура("ИмяРеквизита, ТипРеквизита, НомерКолонки, НомерЛиста, ВидСравнения, НомераПопыток, АвтоопределениеНомеровКолонок", "ЕдиницаИзмерения", "Справочник.УпаковкиЕдиницыИзмерения", 8, 1, "=", "", "единица измерения, е.и., ед., изм."));
	НН.Добавить(Новый Структура("ИмяРеквизита, ТипРеквизита, НомерКолонки, НомерЛиста, ВидСравнения, НомераПопыток, АвтоопределениеНомеровКолонок", "Количество", "Число", 9, 1, "=", "", "количество, кол-во, кол."));
	СтруктураНастроек.Вставить("мНомераСтолбцов", НН);
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Процедура ПоместитьФормуВНастройки(Настройки, мЭтаФорма, ПравилаПоискаПоРеквизитам, ПравилаАвтоопределенияКолонок, НомераСтолбцов) Экспорт
	
	Настройки = scmОбщегоНазначенияКлиентСервер.НастройкиПоискаНоменклатурыПоКолонкамExcelПоУмолчанию();	
	Настройки.мНомераСтолбцов.Очистить();
	ЗаполнитьЗначенияСвойств(Настройки, мЭтаФорма);
	
	Для Каждого НН Из ПравилаПоискаПоРеквизитам Цикл 
		н = Новый Структура("ИмяРеквизита, ТипРеквизита, НомерКолонки, НомерЛиста, ВидСравнения, НомераПопыток, АвтоопределениеНомеровКолонок", "", 0, "=", "", "");
		ЗаполнитьЗначенияСвойств(н, НН);
		Для Каждого к Из НомераСтолбцов.Выгрузить().Колонки Цикл 
			Если к.Имя = НН.ИмяРеквизита Тогда  
				н.НомерКолонки = НомераСтолбцов[0][к.Имя];
			КонецЕсли;	
		КонецЦикла;	
		мм = ПравилаАвтоопределенияКолонок.НайтиСтроки(Новый Структура("ИмяРеквизита", НН.ИмяРеквизита));
		н.АвтоопределениеНомеровКолонок = мм[0].АвтоопределениеНомеровКолонок;
		Настройки.мНомераСтолбцов.Добавить(н);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
//Вызывается при открытии формы и при автозаполнении колонок
//используется: Обработка.scmЗагрузкаНоменклатуры, БП.scmСозданиеНоменклатуры
Процедура ПоместитьНастройкиВФорму(Настройки, ТолькоНомераКолонок = Ложь, мЭтаФорма, ПравилаПоискаПоРеквизитам, ПравилаАвтоопределенияКолонок = Неопределено, НомераСтолбцов) Экспорт
	
	Если ТолькоНомераКолонок Тогда
		мЭтаФорма.НомерПервойСтроки = Настройки.НомерПервойСтроки;
	Иначе 	
		ЗаполнитьЗначенияСвойств(мЭтаФорма, Настройки);
		ПравилаПоискаПоРеквизитам.Очистить();	
		Если Не ПравилаАвтоопределенияКолонок = Неопределено Тогда 
			ПравилаАвтоопределенияКолонок.Очистить();	
		мЭтаФорма.НомерЛиста = Настройки.НомерЛиста;
		КонецЕсли;
	КонецЕсли;
	//мЭтаФорма.НомерЛиста = Настройки.НомерЛиста;
	НомераСтолбцов.Очистить();	
	
	Если Настройки.Свойство("мНомераСтолбцов") Тогда 
		н = НомераСтолбцов.Добавить();	
		Для Каждого НН Из Настройки.мНомераСтолбцов Цикл 
			Для Каждого к Из НомераСтолбцов.Выгрузить().Колонки Цикл 
				Если к.Имя = НН.ИмяРеквизита Тогда  
					н[к.Имя] = НН.НомерКолонки;
				КонецЕсли;	
			КонецЦикла;	
			Если Не ТолькоНомераКолонок Тогда 
				п = ПравилаПоискаПоРеквизитам.Добавить();
				ЗаполнитьЗначенияСвойств(п, НН);
				Если Не  ПравилаАвтоопределенияКолонок = Неопределено Тогда 
					п = ПравилаАвтоопределенияКолонок.Добавить();
					ЗаполнитьЗначенияСвойств(п, НН);
				КонецЕсли;
				Если НН.Свойство("АвтоопределениеНомеровКолонок") И Не ПравилаАвтоопределенияКолонок = Неопределено Тогда 
					п.АвтоопределениеНомеровКолонок = НН.АвтоопределениеНомеровКолонок; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АвтоопределениеНомеровКолонокНаСервере(АдресИсходногоФайлаВХранилище, Настройки) Экспорт 
	
	Настройки.НомерПервойСтроки = 0;
	Для Каждого м Из Настройки.мНомераСтолбцов Цикл 
 		м.НомерКолонки = 0;// Очистка чтобы были видны не найденные значения	
	КонецЦикла; 
				
	Данные = ПолучитьИзВременногоХранилища(АдресИсходногоФайлаВХранилище);
	ФайлДанных = ПолучитьИмяВременногоФайла("xlsx");
	Данные.Записать(ФайлДанных);
	
	ТабличныйДокументЛисты = Новый ТабличныйДокумент;
	ТабличныйДокументЛисты.Прочитать(ФайлДанных, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	//Настройки.НомерЛиста = ?(ТабличныйДокументЛисты.Области.Количество() = 1, 1, Настройки.НомерЛиста);
	
	ТабличныйДокумент = ТабличныйДокументЛисты.ПолучитьОбласть(ТабличныйДокументЛисты.Области[Настройки.НомерЛиста-1].Имя);
	Для НомерЛиста = 1 По ТабличныйДокументЛисты.Области.Количество() Цикл
		Если Настройки.НомерЛистаУказанВручную И Не Настройки.НомерЛиста = НомерЛиста Тогда 
			Продолжить;	
		КонецЕсли;	
		кНайденных = 0;
		ТабличныйДокумент = ТабличныйДокументЛисты.ПолучитьОбласть(ТабличныйДокументЛисты.Области[НомерЛиста-1].Имя);
		Для НомерСтроки = 1 По 10 Цикл
			Для НомерКолонки = 1 По 14 Цикл
				Текст = СокрЛП(ТабличныйДокумент.Область("R" + Формат(НомерСтроки,"ЧГ=0") + "C" + НомерКолонки).Текст);
				Для Каждого м Из Настройки.мНомераСтолбцов Цикл 
					Для Каждого Слово Из СтрРазделить(м.АвтоопределениеНомеровКолонок, ",", Ложь) Цикл 
						Если СтрЧислоВхождений(НРег(Текст), НРег(СокрЛП(Слово))) = 1 Тогда  
							Если м.НомерКолонки = 0 Тогда 
								м.НомерКолонки = НомерКолонки;	
								Настройки.НомерПервойСтроки = НомерСтроки + 1;
								кНайденных = кНайденных + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
				КонецЦикла;		
			КонецЦикла; 
		КонецЦикла; 
		Настройки.НомерЛиста = НомерЛиста;
		Если кНайденных >= 5 Тогда 
			Прервать;  
		ИначеЕсли НомерЛиста = ТабличныйДокументЛисты.Области.Количество() Тогда
			//последняя страница
		Иначе  
			Для Каждого м Из Настройки.мНомераСтолбцов Цикл
				м.НомерКолонки = 0;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
    Попытка
    	УдалитьФайлы(ФайлДанных);
    Исключение
    	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
	
КонецФункции


#Область Поиск

&НаСервере
Функция ПоискПоРекизитам(ТекущаяСтрока, ПравилаПоискаПоРеквизитам) Экспорт
	
	ТаблицаВариантов = Неопределено;
	Попыток = 1;
	ПравилаПоиска = ПравилаПоискаПоРеквизитам.Выгрузить();
	ПравилаПоиска.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ПравилаПоиска.Сортировать("НомераПопыток Убыв");
	Для Каждого н Из ПравилаПоиска Цикл 
		н.Выбран = ЗначениеЗаполнено(н.НомераПопыток);
		мНомераПопыток = СтрРазделить(н.НомераПопыток,",", Ложь);
		Для Каждого м Из мНомераПопыток Цикл 
			Попыток = Макс(Попыток, Число(м))
		КонецЦикла;			
	КонецЦикла;
	ПравилаПоиска = ПравилаПоиска.Скопировать(Новый Структура("Выбран", Истина));

	Для нПопытка = 1 По Попыток Цикл 
		Обязательный = Ложь;
		Для Каждого н Из ПравилаПоиска Цикл 
			н.Выбран = СтрЧислоВхождений(н.НомераПопыток, Строка(нПопытка)) = 1;
		КонецЦикла;
		ПопыткаПоискПоРекизитам(ТекущаяСтрока, ПравилаПоиска, ТаблицаВариантов);
	КонецЦикла;
	
	Возврат ТаблицаВариантов;

КонецФункции

&НаСервере
Процедура ПопыткаПоискПоРекизитам(ТекущаяСтрока, Правила, ТаблицаВариантов)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	1 = 1
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
	
	УсловиеТекст = "";
	Для Каждого н Из Правила Цикл 
		Если н.Выбран Тогда 
			Если ПустаяСтрока(ТекущаяСтрока[н.ИмяРеквизита]) Тогда  
				Возврат; //поле поиска не может быть пустым
			КонецЕсли;	
			УсловиеТекст = УсловиеТекст + "И Номенклатура." + н.ИмяРеквизита + ?(н.ТипРеквизита = "Строка", "", ".Наименование") + " " + н.ВидСравнения  + " &" + н.ИмяРеквизита + Символы.ПС;
			Запрос.УстановитьПараметр(н.ИмяРеквизита, Строка(ТекущаяСтрока[н.ИмяРеквизита]));
		КонецЕсли;	
	КонецЦикла;
	
	УсловиеТекст = Сред(УсловиеТекст, 2);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", УсловиеТекст);
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекущаяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
		ТекущаяСтрока.ВидНоменклатуры = ВыборкаДетальныеЗаписи.ВидНоменклатуры;
	КонецЦикла;
	
	ТекущаяСтрока.НайденоВариантов = ВыборкаДетальныеЗаписи.Количество();
	ТаблицаВариантов = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура ПоискПолнотекстовый(ТекущаяСтрока, СпособПоискаПорогНечеткости) Экспорт
	
	СписокПоиска = РезультатПолнотекстовогоПоиска(ТекущаяСтрока, СпособПоискаПорогНечеткости);
	Для Каждого Результат Из СписокПоиска Цикл
		ТекущаяСтрока.Номенклатура = Результат.Значение;
		Прервать;
	КонецЦикла; 	
	ТекущаяСтрока.НайденоВариантов = СписокПоиска.ПолноеКоличество();		
	
КонецПроцедуры

&НаСервере
Функция РезультатПолнотекстовогоПоиска(ТекущаяСтрока, СпособПоискаПорогНечеткости) Экспорт 
	
	//TODO вынести на форму
	СтрокаПоиска = ?(ПустаяСтрока(ТекущаяСтрока.Артикул), ТекущаяСтрока.Наименование, ТекущаяСтрока.Артикул);
	СтрокаПоиска = Стрзаменить(СтрокаПоиска, ",", ".");	
	СтрокаПоиска = Стрзаменить(СтрокаПоиска, "(", " ");	
	СтрокаПоиска = Стрзаменить(СтрокаПоиска, ")", " ");	
	
	СтрокаПоиска = Стрзаменить(СтрокаПоиска, "град.", "°");	
	СтрокаПоиска = Стрзаменить(СтрокаПоиска, "исполнение", "исп.");	
	СтрокаПоиска = Стрзаменить(СтрокаПоиска, " для ", " ");	
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);		
	СписокПоиска.ПолучатьОписание = Истина;
	СписокПоиска.РазмерПорции = 5;	
	СписокПоиска.ПорогНечеткости = СпособПоискаПорогНечеткости;
	
	МассивОтбор = Новый Массив();
	МассивОтбор.Добавить(Метаданные.Справочники.Номенклатура);
	СписокПоиска.ОбластьПоиска = МассивОтбор;
	СписокПоиска.ПерваяЧасть(); // Выдает по 5 результатов - РазмерПорции
	
	Возврат СписокПоиска;
	
КонецФункции

#КонецОбласти

#КонецОбласти  

Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий) Экспорт
	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуКиЗПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураКиЗ");
		СтруктураПолейТЧ.Вставить("ХарактеристикаКиЗ");
		СтруктураПолейТЧ.Вставить("ХарактеристикиКиЗИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("НомерГТД");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоПоРНПТ");
		СтруктураПолейТЧ.Вставить("ВедетсяУчетПоРНПТ");
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.МестоХраненияВТабличнойЧасти Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИмяПоляМестоХранения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", СтруктураПараметровДействия)
	   И СтруктураПараметровДействия <> Неопределено 
	   И СтруктураПараметровДействия.Свойство("НужноОкруглять")
	   И ТекущаяСтрока.Свойство("НужноОкруглять") Тогда
		СтруктураПолейТЧ.Вставить("НужноОкруглять");	
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИС", СтруктураПараметровДействия)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПоВЕТИС", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВЕТИС");
		СтруктураПолейТЧ.Вставить("Количество" + СтруктураПараметровДействия.Суффикс + "ВЕТИС", 0);
		СтруктураПолейТЧ.Вставить("Количество" + СтруктураПараметровДействия.Суффикс, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("GTIN");
		
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоФакт", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"		  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяКолонкиУпаковка") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяКолонкиУпаковка);
		Иначе
			СтруктураПолейТЧ.Вставить("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		 ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСверхЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КодСтроки", 1);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовЗаказРеализация", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовЗаказРеализация");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
	
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда

		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизитаСтатьиРасходов") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизитаСтатьиРасходов"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
		СтруктураПолейТЧ.Вставить("Склад");
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		
		Если СтруктураДействий.ПроверитьЗаполнитьОбеспечение.Свойство("ПроверитьЗаполнитьНазначениеОтправителя") Тогда	
			СтруктураПолейТЧ.Вставить("НазначениеОтправителя")
		Иначе
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
	 ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	

	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьИндексАкцизнойМарки", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
		СтруктураПолейТЧ.Вставить("ИндексАкцизнойМарки");
		СтруктураПолейТЧ.Вставить("КоличествоАкцизныхМарок");
		СтруктураПолейТЧ.Вставить("Количество");
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Если СтруктураПараметровДействия.Свойство("ИмяКолонкиКоличество") Тогда
				СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ИмяКолонкиКоличество);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруЕГАИС", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("НоменклатураЕГАИС");
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеАлкогольнаяПродукция");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьАлкогольнуюПродукцию", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеАлкогольнаяПродукция");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродукциюВЕТИС", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Продукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеТекст");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВЕТИС");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
		
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство("Серия" + Суффикс) Тогда
					СтруктураПолейТЧ.Вставить("Серия" + Суффикс);
					СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
					СтруктураПолейТЧ.Вставить("Характеристика" + Суффикс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество, 0);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Назначение") Тогда
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДС");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДС");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
		СтруктураПолейТЧ.Вставить("ПоВинеСтороннейКомпании");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		СтруктураПолейТЧ.Вставить("Штрихкод");
		СтруктураПолейТЧ.Вставить("ШтрихкодНеОпределен");
		СтруктураПолейТЧ.Вставить("ЭтоУпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("УпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоличествоЗаполненныхПодчиненныхПозиций");
		СтруктураПолейТЧ.Вставить("ТребуетсяОбработка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("НазначениеОтправителя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		СтруктураПолейТЧ.Вставить("КатегорияЭксплуатации");
		СтруктураПолейТЧ.Вставить("ИнвентарныйУчет");
		СтруктураПолейТЧ.Вставить("СпособПогашенияСтоимостиБУ");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("СрокЭксплуатации");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия + "ДвиженияПоСкладскимРегистрам");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("ДатаОтгрузкиОбязательна");
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуУслугиЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги"       , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСуммуЗаказДавальца),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСуммуЗаказДавальца), 0);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги",                0);
		СтруктураПолейТЧ.Вставить("СуммаСобственныхМатериалов", 0);
		СтруктураПолейТЧ.Вставить("Сумма",                      0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации") Тогда
		
		СтруктураПолейТЧ.Вставить("ВариантОтражения");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД") Тогда
		СтруктураПолейТЧ.Вставить("СтранаПроисхождения");
	КонецЕсли;
	
	
	

	
	
//	ОбработкаТабличнойЧастиКлиентЛокализация.ПолучитьТекущуюСтрокуСтруктурой(СтруктураДействий, СтруктураПолейТЧ);

	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции